{"name":"@carbon-io/carbon-client-node","license":"MIT","version":"0.6.7","description":"carbon client node","repository":"https://github.com/carbon-io/carbon-client-node","main":"./lib/CarbonClient.js","engines":{"node":">=4.0.0"},"devDependencies":{"@carbon-io/atom":"0.7.x","@carbon-io/bond":"0.6.x","@carbon-io/test-tube":"0.6.x","lodash":"4.16.x"},"dependencies":{"mongodb-extended-json":"1.1.2","@carbon-io/fibers":"0.7.x","@carbon-io/carbon-client":"0.5.x","nock":"8.2.0"},"scripts":{"test":"node test"},"preferGlobal":false,"bin":{},"gitHead":"e8a522935d8e3bd3890582fd521e89f9bdd5697f","homepage":"https://github.com/carbon-io/carbon-client-node#readme","versions":[{"number":"0.2.2","date":"2016-10-31T20:48:09.063Z"},{"number":"0.2.3","date":"2016-10-31T21:21:47.585Z"},{"number":"0.2.4","date":"2016-11-07T22:22:39.708Z"},{"number":"0.2.5","date":"2016-11-10T22:55:51.711Z"},{"number":"0.3.0","date":"2017-01-30T23:07:30.425Z"},{"number":"0.3.2","date":"2017-01-30T23:24:32.217Z"},{"number":"0.4.0","date":"2017-02-23T00:11:42.814Z"},{"number":"0.4.3","date":"2017-03-13T23:12:52.135Z"},{"number":"0.4.5","date":"2017-03-15T17:28:11.847Z"},{"number":"0.4.6","date":"2017-03-15T17:37:05.142Z"},{"number":"0.4.7","date":"2017-03-15T17:52:28.710Z"},{"number":"0.4.9","date":"2017-03-16T22:35:57.233Z"},{"number":"0.4.11","date":"2017-03-17T01:29:30.260Z"},{"number":"0.5.0","date":"2017-03-30T16:38:06.866Z"},{"number":"0.6.0","date":"2017-04-10T23:45:03.586Z"},{"number":"0.6.1","date":"2017-04-11T00:10:14.678Z"},{"number":"0.6.2","date":"2017-04-12T21:03:53.075Z"},{"number":"0.6.7","date":"2017-06-15T21:35:21.659Z"}],"readme":"[![Build Status](https://travis-ci.org/carbon-io/carbon-client-node.svg?branch=master)](https://travis-ci.org/carbon-io/carbon-client-node)\n\nCarbonClient\n==========\n***\n\nOverview\n---------\n\nCarbonClient is the client-component for Carbon.io. It is a light-weight RESTFul client For NodeJS that can connect to any REST API.\nIt uses the standard node ```request``` module to make http calls.\n\n\nMain features:\n\n\n* Support for all HTTP methods: ```GET```, ```PUT```, ```POST```, ```CREATE```, ```DELETE```, ```HEAD```, ```OPTIONS```, ```PATCH```.\n* Support for all Carbon.io collections endpoint methods: ```find()```, ```insert()```, ```update()```, ```findObject()```, ```updateObject()```,\n```saveObject()```, ```remove()```, ```removeObject()```.\n* Asynchronous/synchronous programming styles.\n* Authentication\n\n\n\nInstallation\n---------\n\n```\n<path-to-your-app>/\n    package.json\n```\n\nYour package.json should include ```carbon-client-node```\n\n```node\n{\n    ...\n\n    \"dependencies\": {\n        \"@carbon-io/carbon-client-node\": \"git+ssh://git@github.com/carbon-io/carbon-client-node.git\"\n    }\n\n    ...\n}\n```\n\nThen install the package dependencies like this:\n\n```\n% cd <path-to-your-app>\n% npm install .\n```\n\n\nQuick Start\n---------\n\nThis is a simple example for an http get operation\n\n```node\n// require the client\nvar CarbonClient = require('@carbon-io/carbon-client-node')\n\n// Service for this example: https://github.com/carbon-io/example__hello-world-service/blob/master/lib/HelloService.js\n\n// create the client object\nvar client = new CarbonClient(\"http://localhost:8888\")\n\n// GET http://localhost:8888/hello\nclient.getEndpoint(\"hello\").get(function(e, response) {\n  console.log(\"Response from /hello: \")\n  console.log(response.body)\n})\n\n```\n\nQuick Start (synchronized style)\n---------\n\nIn general, all CarbonClient methods that take a callback function can be invoked synchronously (within a fiber)\nby simply not passing a callback function (which is always the last argument). That's the general rule.\n\n```node\n// This example uses the carbon-io fibers module to create a fiber.\n// For more info, see https://docs.carbon.io/en/latest/packages/carbon-core/docs/packages/fibers/docs/guide/index.html\n\nvar __ = require('@carbon-io/fibers').__(module)\n\n// require the client\nvar CarbonClient = require('@carbon-io/carbon-client-node')\n\n// Service for this example: https://github.com/carbon-io/example__hello-world-service/blob/master/lib/HelloService.js\n\n__(\n  function() {\n    var client = new CarbonClient(\"http://localhost:8888\")\n\n    // Synchronized call, not how\n    var response = client.getEndpoint(\"hello\").get()\n    console.log(\"Response from /hello: \")\n    console.log(response.body)\n\n  })\n```\n\n\nUse\n---------\n\n### Basic HTTP calls\n\nAll http methods are supported through  ```Endpoint``` object. Each http method has a matching ```Endpoint``` method with same name all lowercase. e.g.\n```GET``` is done by ```Endpoint.get()```, ```POST``` with ```Endpoint.post()```, etc...\n\n\n\n#### GET\n\n\nSupported calling forms for ```Endpoint.get()``` are as follows:\n\n*   get(cb)\n*   get(options, cb)\n\nFor synchronized calls:\n\n*   get()\n*   get(options)\n\n\n```node\n// require the client\nvar CarbonClient = require('@carbon-io/carbon-client-node')\n\nvar client = new CarbonClient(\"http://localhost:8888\")\n\n// Service for this example: https://github.com/carbon-io/example__hello-world-service/blob/master/lib/HelloService.js\n\n// create an endpoint object for /hello\nendpoint = client.getEndpoint(\"hello\")\n\n// call get() which will call GET on http://localhost:8888/hello\nendpoint.get(function(e, response) {\n  console.log(\"Response from /hello: \")\n  console.log(response.body)\n})\n\n```\n#### Response object\nThe ```response``` object that is returned by ```CarbonClient``` is the response object from the nodejs ```request``` module.\nFull doc here https://github.com/request/request\n\nSome available fields are:\n```node\n\nresponse.statusCode: http status code (int)\nresponse.headers: an object containing response headers\nresponse.body: response body\n\n```\n\n#### Passing query string params\nQuery string params are passed as an object through the ```options.params``` argument of each http method\n```node\n\n// require the client\nvar CarbonClient = require('@carbon-io/carbon-client-node')\n\n// Service for this example: https://github.com/carbon-io/example__hello-world-service-parameter-parsing/blob/master/lib/HelloService.js\n\nvar client = new CarbonClient(\"http://localhost:8888\")\n\n// create an endpoint object for /hello\nvar endpoint = client.getEndpoint(\"hello\")\n\nvar options = {\n  params: {\n    message: \"Welcome to carbon-io!\"\n\n  }\n}\n\n// GET http://localhost:8888/hello?message=\"Welcome to carbon-io!\"\nendpoint.get(options, function(e, response) {\n  console.log(\"Response from /hello: \")\n  console.log(response.body)\n})\n```\n\nOutput:\n\n```\nResponse from /hello:\n{ msg: 'Hello world! Welcome to carbon-io!' }\n```\n#### POST\n\nSupported calling forms for ```Endpoint.post()``` are as follows:\n\n*   post(cb)\n*   post(body, cb)\n*   post(body, options, cb)\n\nFor synchronized calls:\n\n*   post()\n*   post(body)\n*   post(body, options)\n\n```node\n// require the client\nvar CarbonClient = require('@carbon-io/carbon-client-node')\n\n// Service for this example: https://github.com/carbon-io/examples/blob/master/hello-world/HelloService.js\n\nvar client = new CarbonClient(\"http://localhost:8888\")\n\n// create an endpoint object for /hello\nvar endpoint = client.getEndpoint(\"hello\")\n\nvar body = {\n  msg: \"Welcome to carbon-io!\"\n}\n\nendpoint.post(body, function(e, response) {\n  console.log(\"Response from /hello: \")\n  console.log(response.body)\n})\n```\n\n\n#### PUT/PATCH\n\n```PUT```, ```PATCH``` can be performed with ```Endpoint.put()```, ```Endpoint.patch()``` methods\n respectively. Arguments of these methods are all the same and similar to the ```Endpoint.post()``` method.\n\n\n\n```node\n//  put to /users\nclient.getEndpoint(\"users\").put({\n    \"id\": 1234,\n    \"name\": \"bob\"\n  },\n  function(e, response) {\n    console.log(\"Response from /users:\")\n    console.log(response.body)\n})\n```\n\n\n#### HEAD/OPTIONS/DELETE\n\n```HEAD```, ```OPTIONS```, ```DELETE``` can be performed with ```Endpoint.head()```, ```Endpoint.options()```, ```Endpoint.delete()```  methods\n respectively. Arguments of these methods are all the same and similar to the ```Endpoint.get()``` method.\n\nSupported calling forms for ```Endpoint.head()``` are as follows:\n\n*   head(cb)\n*   head(options, cb)\n\nFor synchronized calls:\n\n*   head()\n*   head(options)\n\n\n```node\n//  call http OPTIONS method\nclient.getEndpoint(\"test-options\").options(null,\n  function(e, response) {\n    console.log(\"Response from /test-options:\")\n    console.log(response.body)\n})\n```\n\n### Collections and Cursors\nCarbonClient provides convenient interfaces to access collections. It provides classes similar to MongoDB Driver Collection/Cursor classes. You can perform ```find()```, ```insert()```, ```update()```, ```findObject()```, ```updateObject()```, ```saveObject()```, ```remove()```, ```removeObject()```.\n \n#### find()\n The ```find()``` method returns a ```Cursor``` object which is used to iterate over results.\n\n\n```find()``` supports the following calling forms\n\n*   find(query)\n*   find(query, options)\n\n\n\n```node\n// find all users\nvar usersCollection = client.getCollection(\"users\")\nusersCollection.find().toArray(function(e, data) {\n  console.log(\"All users\")\n  console.log(data)\n})\n\n// find by query\nusersCollection.find({\"name\": \"joe\"}).toArray(function(e, data) {\n  console.log(\"All users matching name 'joe'\")\n  console.log(data)\n})\n\n})\n```\n\nThe ```find()``` method returns a ```Cursor``` object which is used to iterate over results.\n\n\n##### Cursor iteration\nThe ```Cursor.toArray()``` loads all results into a single array object which could be memory consuming.\nTo avoid that, use the ```Cursor.each()``` method which takes a function to iterate over each item of results.\nIt will return ```null``` when the cursor finishes.\n\n```node\n// find all users\nvar usersCollection = client.getCollection(\"users\")\nvar cursor = usersCollection.find()\ncursor.each(function(e, item) {\n  if (item == null) {\n    console.log(\"Finish!\")\n  } else {\n     console.log(item)\n  }\n\n\n})\n\n```\n\nCursors also provide a ```next()``` method to iterate over a single item. It will return ```null``` when the cursor finishes.\n\n```node\n// find all users\nvar usersCollection = client.getCollection(\"users\")\nvar cursor = usersCollection.find()\ncursor.next(function(e, item) {\n  if (item == null) {\n    console.log(\"Finish!\")\n  } else {\n    console.log(\"Next item:\")\n    console.log(item)\n  }\n\n})\n\n```\n\n##### Cursor pagination\n\nPagination for results returned by ```find()``` can be achieved  with ```skip``` and ```limit``` options through the ```options``` argument:\n\n```node\n\nvar usersCollection = client.getCollection(\"users\")\nvar cursor = usersCollection.find({}, {skip:100, limit:100}).toArray(function(e, data) {\n  for( var i=0; i < data.length; i++) {\n     console.log(data[i])\n  }\n\n})\n\n```\n\n\n##### Sorting find() results\n\n```options``` argument also allows ```sort``` which takes a key to sort on:\n\n```node\n\nvar usersCollection = client.getCollection(\"users\")\n\n// find all users sort by name descending\nvar cursor = usersCollection.find({}, {sort:{\"name\": -1}}).toArray(function(e, data) {\n  for( var i=0; i < data.length; i++) {\n     console.log(data[i])\n  }\n\n})\n\n```\n\n\n##### Limiting fields within find() results\n\nYou can limit the set of fields returned by find using ```options.projection``` argument. The ```projection``` argument\ncan be specified in the following form:\n\n```\n\n{\n  <field-path>: 0 | 1\n}\n\n```\nset field value to be 1 to include, 0 to exclude.\n\n\n```node\n\nvar usersCollection = client.getCollection(\"users\")\n\n// find all users and get _id and name, address.city only\nusersCollection.find({}, {\n    projection: {\n      _id: 1,\n      \"name\": 1,\n      \"address.city\": 1\n    }\n   }).toArray(function(e, data) {\n  for(var i=0; i < data.length; i++) {\n     console.log(data[i])\n  }\n\n})\n\n// exclude \"address\" only\n\n// find all users and get _id and name, address.city only\nusersCollection.find({}, {\n    projection: {\n      \"address\": 0\n    }\n   }).toArray(function(e, data) {\n  for(var i=0; i < data.length; i++) {\n     console.log(data[i])\n  }\n\n})\n\n```\n#### findObject()\n\nFinds the object with the specified object id.\n\nSupported calling forms:\n*   findObject(id, cb)\n\nFor synchronized calls:\n*   findObject(id)\n\n\n\n#### insert()\n\nSupported calling forms:\n*   insert(obj, cb)\n\nFor synchronized calls:\n*   insert(obj)\n\n```node\nusersCollection.insert({\n    username: \"joe\"\n  },\n  function(e, result) {\n    assert(result.ok) // true for success\n    console.log(result)\n  }\n)\n```\n\n\n#### update()\n\nSupported calling forms:\n*   ```update(query, obj, cb)```\n*   ```update(query, obj, options, cb)```\n\nFor synchronized calls:\n*   ```update(query, obj)```\n*   ```update(query, obj, options)```\n\n#### updateObject()\n\nSupported calling forms:\n*   ```updateObject(id, update, cb)```\n\nFor synchronized calls:\n*   ```updateObject(id, update)```\n\n#### saveObject()\n\nSupported calling forms:\n*   ```saveObject(id, obj, cb)```\n\nFor synchronized calls:\n*   ```saveObject(id, obj)```\n\n#### remove()\n\nSupported calling forms:\n*   ```remove(query, cb)```\n*   ```remove(query, options, cb)```\n\nFor synchronized calls:\n*   ```remove(query)```\n*   ```remove(query, options)```\n\n#### removeObject()\n\nSupported calling forms:\n*   ```removeObject(id, cb)```\n\nFor synchronized calls:\n*   ```removeObject(id)```\n\n### Error handling\nErrors raised by CarbonClient are instances of the HttpError class defined in [HttpErrors](https://github.com/carbon-io/http-errors) module of carbon.\nAn HttpError contains the http error code, message, and description.\n\nFor asynchronous calls, The error object will be the first argument of the callback function.\n\n```node\n\n// GET http://localhost:8888/doesnotexit\nclient.getEndpoint(\"doesnotexit\").get(function(e, response) {\n  if(e) {\n      console.log(\"Caught an error\")\n      console.log(\"code: \" + e.code); // 404\n      console.log(\"message: \" + e.message);\n      console.log(\"description: \" + e.description);\n  }\n})\n```\n\n\n### Synchronized calls (calling with no callbacks)\nIt is super easy to make sync calls with CarbonClient. All you have do is just call same methods but just without passing a callback function.\nSync calls must be made withing a fiber. The main difference is that the results returned by the method and if there was an error, then it will be raised.\n\n```node\n\n// This example uses the carbon-io fibers module to create a fiber.\n// For more info, https://docs.carbon.io/en/latest/packages/carbon-core/docs/packages/fibers/docs/guide/index.html\nvar __ = require('@carbon-io/fibers').__(module)\n\nvar CarbonClient = require('carbon-client-node')\n\n```\n##### Synchronized HTTP Methods\n```node\n\n__(\n  function() {\n\n    // sync get /hello\n    var endpoint = client.getEndpoint(\"hello\")\n    var res = endpoint.get()\n    console.log(\"Response from /hello:\")\n    console.log(res.body)\n\n\n    // sync post /user\n    var usersEndpoint = client.getEndpoint(\"users\")\n    var res = usersEndpoint.post({\"name\": \"bob\"})\n    console.log(\"Response from /users:\")\n    console.log(res.body)\n\n})\n```\n\n##### Synchronized Collection Methods\n\nExample for  sync ```Collection.insert()``` method\n\n```node\n__(\n  function() {\n    // sync insert\n    var result = client.getCollection(\"users\").insert({\n            username: \"joe\"\n      })\n\n\n    console.log(result.ok)\n})\n\n```\n\n##### Synchronized Cursor Methods\n\n\n```node\n\n__(\n  function() {\n    // sync collection find\n    users = client.getCollection(\"users\").find().toArray()\n    console.log(users[0])\n})\n\n\n```\n\nTo use a sync version ```Cursor.each()```, you use the ```Cusor.eachSync()``` method for that\n\n```node\n\n__(\n  function() {\n\n\n    // sync collection each\n    client.getCollection(\"users\").find().eachSync(function(e, item) {\n        console.log(item)\n    })\n})\n\n```\n\nExample for  sync ```Cursor.next()``` method\n\n```node\n__(\n  function() {\n    // return the first user\n\n    user = client.getCollection(\"users\").find().next()\n    console.log(user)\n\n    // sync insert\n})\n```\n\n##### Error Handling for Synchronized Methods\n\n```node\n__(\n  function() {\n    // Error handling\n    // GET http://localhost:8888/doesnotexit\n\n    try {\n        client.getEndpoint(\"doesnotexit\").get()\n    } catch(e) {\n        console.log(\"Caught an error\")\n        console.log(\"code: \" + e.code); // 404\n        console.log(\"message: \" + e.message);\n        console.log(\"description: \" + e.description);\n    }\n\n  }\n)\n\n\n```\n\n\n### Endpoint Tree\n\nAs a convenience, ```Endpoint``` allow accessing sub-endpoints using the ```Endpoint.getEndpoint()``` method. You can also\n access the parent Endpoint by ```Endpoint.parent```\n```node\n\ne1 = client.getEndpoint(\"foo/bar\")\n//is equivalent to\ne2 = client.getEndpoint(\"foo\").getEndpoint(\"bar\")\n\n```\n\nEndpoint full uri and absolute path can be accessed as follows\n\n```node\nconsole.log(e1.getAbsolutePath()) // '/foo/bar'\nconsole.log(e2.getAbsolutePath()) // '/foo/bar' as well\n\n\nconsole.log(e1.getFullUrl()) // this will return client.uri + endpoint's absolute path which will be http://localhost:8888/foo/bar in this case\n\n```\n\n### Passing Headers\n\nHeaders can be passed as JSON with the ```options.headers``` option. This can be client-level or operation-level.\nThis is an example of an operation-level header passing.\n\n```node\n // Plain text\n client.getEndpoint(\"hello\").get({headers: {\"Cache-Control\": \"no-cache\"}},\n     function(e, response) {\n       console.log(\"Response from /hello: \" + response.body)\n   }\n )\n```\n\n\n### Options\n\nOptions can be be set at client-level or operation-level.\n\n\nTo set options at the client level, it is passed with the \"options\" constructor argument ```CarbonClient(url, options)```.\nFor passing them on the operation-level, it is passed with the \"options\" argument for each endpoint http method.\n\n```node\n//e.g\nendpoint.get(options, cb)\n```\n\n\nSupported options are as follows:\n\n##### Authentication\n\nCurrently, CarbonClient only supports api-key authentication model.\nCarbonClient allows Api key authentication by passing the api key value in the header or query string. This will make the client send the api key parameter in every request.\nSee following example:\n\n```node\n\nvar client = new CarbonClient(\"http://localhost:8888\", {\n  authentication: {\n    type: \"api-key\",\n    apiKey:\"123\",\n    apiKeyParameterName: \"API_KEY\", // the parameter name of the api key\n    apiKeyLocation: \"header\" // use \"query\" for passing API_KEY using query string\n  }\n})\n\n\n```\n\n##### SSL Options\n\nSSL options are as follows:\n ```\n strictSSL: If true, requires SSL certificates be valid\n cert: cert file content\n key: key file content\n ca: ca file content\n```\n\nHere is an example of that\n\n```node\n\nvar defaultOptions = {\n  cert: fs.readFileSync(\"/etc/myservice.cert.pem\"),\n  key: fs.readFileSync(\"/etc/myservice.key.pem\"),\n  ca: caFile ? fs.readFileSync(\"/etc/myservice.ca.cert.pem\"),\n  strictSSL: true\n}\n\nclient = new CarbonClient(uri, defaultOptions);\n\n```\n##### JSON/Plain-text Results\n\nAll results are in JSON by default. For plain text, set ```options.json``` to false:\n\n```node\n // Plain text\n client.getEndpoint(\"hello\").get({json: false}, function(e, response) {\n   console.log(\"Response from /hello: \" + response.body)\n })\n```\n\n\n\n##### keepAlive\n\nkeepAlive can be set through the ```forever``` option\n\n```node\nclient = new CarbonClient(uri, {forever: true});\n```\n\n##### timeout\n\ntimeout can be set through the ```timeout``` option. Its an integer representing timeout in milliseconds.\nThis applies to both connection and read timeouts.\n\n```node\nclient = new CarbonClient(uri, {timeout: true});\n```\n\nClass reference\n---------\n\n* [CarbonClient](doc/classes/CarbonClient.md)\n* [Endpoint](doc/classes/Endpoint.md)\n* [Collection](doc/classes/Collection.md)\n* [Cursor](doc/classes/Cursor.md)\n\n\n\n\n\n","created":"2016-10-31T20:48:09.063Z","modified":"2017-06-15T21:35:21.659Z","lastPublisher":{"name":"abdulito","email":"abdul@objectlabs.com"},"owners":[{"email":"abdul@objectlabs.com","name":"abdulito"},{"email":"robert@mlab.com","name":"robert.mlab"},{"email":"will@mlab.com","name":"willshulman"},{"email":"gbanks@gmail.com","name":"gregbanks"},{"email":"matt@objectlabs.com","name":"matt.hardock"},{"email":"chris@objectlabs.com","name":"chrisckchang"}],"other":{"_attachments":{},"_from":".","_id":"@carbon-io/carbon-client-node","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/carbon-client-node-0.6.7.tgz_1497562521527_0.9510778484400362"},"_npmUser":{"name":"abdulito","email":"abdul@objectlabs.com"},"_npmVersion":"3.10.10","_rev":"20-825cc852235f27db587cd3a81213cbfa","_shasum":"dd030716e3eecda8e0c48233dc66ff6312db8b29","bugs":{"url":"https://github.com/carbon-io/carbon-client-node/issues"},"contributors":[{"name":"Will Shulman","email":"will@objectlabs.com"},{"name":"Abdul Alkhatib","email":"abdul@objectlabs.com"}],"directories":{"lib":"./lib","bin":"./bin"},"dist-tags":{"latest":"0.6.7"},"dist":{"shasum":"dd030716e3eecda8e0c48233dc66ff6312db8b29","tarball":"https://registry.npmjs.org/@carbon-io/carbon-client-node/-/carbon-client-node-0.6.7.tgz"},"maintainers":[{"email":"abdul@objectlabs.com","name":"abdulito"},{"email":"robert@mlab.com","name":"robert.mlab"},{"email":"will@mlab.com","name":"willshulman"},{"email":"gbanks@gmail.com","name":"gregbanks"},{"email":"matt@objectlabs.com","name":"matt.hardock"},{"email":"chris@objectlabs.com","name":"chrisckchang"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T21:35:21.659Z","created":"2016-10-31T20:48:09.063Z","0.2.2":"2016-10-31T20:48:09.063Z","0.2.3":"2016-10-31T21:21:47.585Z","0.2.4":"2016-11-07T22:22:39.708Z","0.2.5":"2016-11-10T22:55:51.711Z","0.3.0":"2017-01-30T23:07:30.425Z","0.3.2":"2017-01-30T23:24:32.217Z","0.4.0":"2017-02-23T00:11:42.814Z","0.4.3":"2017-03-13T23:12:52.135Z","0.4.5":"2017-03-15T17:28:11.847Z","0.4.6":"2017-03-15T17:37:05.142Z","0.4.7":"2017-03-15T17:52:28.710Z","0.4.9":"2017-03-16T22:35:57.233Z","0.4.11":"2017-03-17T01:29:30.260Z","0.5.0":"2017-03-30T16:38:06.866Z","0.6.0":"2017-04-10T23:45:03.586Z","0.6.1":"2017-04-11T00:10:14.678Z","0.6.2":"2017-04-12T21:03:53.075Z","0.6.7":"2017-06-15T21:35:21.659Z"}}}