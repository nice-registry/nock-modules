{"name":"coinbase-exchange","version":"0.2.2","dependencies":{"async":"1.5.0","bintrees":"1.0.0","lodash.assign":"3.0.0","lodash.foreach":"3.0.0","lodash.partial":"3.0.0","nock":"3.6.0","num":"0.2.1","request":"2.74.0","ws":"1.1.1"},"description":"Client for the Coinbase Exchange API","devDependencies":{"mocha":"1.20.1","nsp":"2.6.1"},"homepage":"https://github.com/coinbase/coinbase-exchange-node","keywords":["API","bitcoin","coinbase","exchange","real-time","trading","websockets"],"license":"MIT","main":"index.js","repository":"https://github.com/coinbase/coinbase-exchange-node","scripts":{"test":"mocha --ui qunit --bail --reporter list tests/*.js","scan_packages":"nsp check --output summary"},"gitHead":"50185a16641d991dfe7914955be98e1d0c83ac00","deprecated":"WARNING: This module has been renamed to gdax. Please install it instead.","versions":[{"number":"0.1.0","date":"2015-01-31T02:04:21.858Z"},{"number":"0.2.0","date":"2015-04-01T18:38:58.943Z"},{"number":"0.2.1","date":"2015-11-04T22:05:53.794Z"},{"number":"0.2.2","date":"2016-09-06T21:45:59.012Z"}],"readme":"# DEPRECATED\n\nThis package has been deprecated and will not receive any further updates.\n\nPlease use the new official client [gdax-node](https://github.com/coinbase/gdax-node).\n\n# Coinbase Exchange\nThe official Node.js library for the [GDAX\nAPI](https://docs.gdax.com/) (formerly Coinbase Exchange).\n\n*Note: this library may be subtly broken or buggy. The code is released under\nthe MIT License – please take the following message to heart:*\n\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n*\n\n## Features\n* Easy programmatic trading.\n* A customizable, websocket-synced Order Book implementation.\n* API clients with convenient methods for every API endpoint.\n* Abstracted interfaces – don't worry about HMAC signing or JSON formatting,\n  the library does it for you.\n* Semantic versioning.\n\n## Installation\n```bash\n# From NPM\nnpm install coinbase-exchange\n# From Github\nnpm install coinbase/coinbase-exchange-node\n```\n\n## Quick Start\n\n### The Public API Client\nThe GDAX API has both public and private endpoints. If you're only\ninterested in the public endpoints, you should use a `PublicClient`.\n\n```javascript\nvar CoinbaseExchange = require('coinbase-exchange');\nvar publicClient = new CoinbaseExchange.PublicClient();\n```\n\nAll API methods are callback based. Your callback should accept three arguments:\n\n```\nvar callback = function(err, response, data) {\n  // your code here.\n};\n```\n\nThis callback will be passed directly to [the underlying `request` library's\n`request` method](https://github.com/request/request).  `err` will be either\n`null` or an `Error`. `response` will be a generic HTTP response abstraction\ncreated by the `request` library. `data` will be the result of JSON-decoding\nthe server's response, or `null` if the response was not parseable. You can\nlearn about the API responses of each endpoint [by reading our\ndocumentation](https://docs.gdax.com/#market-data).\n\n#### Public API Methods\n\n* [`getProducts`](https://docs.gdax.com/#get-products)\n```javascript\npublicClient.getProducts(callback);\n```\n\n* [`getProductOrderBook`](https://docs.gdax.com/#get-product-order-book)\n```javascript\n// Get the order book at the default level of detail.\npublicClient.getProductOrderBook(callback);\n// Get the order book at a specific level of detail.\npublicClient.getProductOrderBook({'level': 3}, callback);\n```\n\n* [`getProductTicker`](https://docs.gdax.com/#get-product-ticker)\n```javascript\npublicClient.getProductTicker(callback);\n```\n\n* [`getProductTrades`](https://docs.gdax.com/#get-trades)\n```javascript\npublicClient.getProductTrades(callback);\n// To make paginated requests, include page parameters\npublicClient.getProductTrades({'after': 1000}, callback);\n```\n\n* [`getProductTradeStream`](https://docs.gdax.com/#get-trades)\nWraps around `getProductTrades`, fetches all trades with IDs `>= tradesFrom` and `<= tradesTo`.\nHandles pagination and rate limits.\n\n```javascript\nvar trades = publicClient.getProductTradeStream(8408000, 8409000);\n// tradesTo can also be a function\nvar trades publicClient.getProductTradeStream(8408000, function(trade) {\n    return Date.parse(trade.time) >= 1463068e6\n})\n```\n\n* [`getProductHistoricRates`](https://docs.gdax.com/#get-historic-rates)\n```javascript\npublicClient.getProductHistoricRates(callback);\n// To include extra parameters:\npublicClient.getProductHistoricRates({'granularity': 3000}, callback);\n```\n\n* [`getProduct24HrStats`](https://docs.gdax.com/#get-24hr-stats)\n```javascript\npublicClient.getProduct24HrStats(callback);\n```\n\n* [`getCurrencies`](https://docs.gdax.com/#get-currencies)\n```javascript\npublicClient.getCurrencies(callback);\n```\n\n* [`getTime`](https://docs.gdax.com/#time)\n```javascript\npublicClient.getTime(callback);\n```\n\n### The Authenticated API Client\nThe [private exchange API\nendpoints](https://docs.gdax.com/#private) require you to\nauthenticate with an API key. You can create a new API key [in your exchange\naccount's settings](https://gdax.com/settings).\n\n```javascript\nvar CoinbaseExchange = require('coinbase-exchange');\nvar authedClient = new CoinbaseExchange.AuthenticatedClient(\n  key, b64secret, passphrase);\n```\n\nLike the `PublicClient`, all API methods are callback based. The callback\nshould be in the same format:\n\n```\nvar callback = function(err, response, data) {\n  // your code here.\n};\n```\n\nThe `AuthenticatedClient` inherits all of the API methods defined by the\n`PublicClient`, so if you're hitting both public and private API endpoints you\nonly need to create a single client.\n\n#### Private API Methods\n\n* [`getAccounts`](https://docs.gdax.com/#list-accounts)\n```javascript\nauthedClient.getAccounts(callback);\n```\n\n* [`getAccount`](https://docs.gdax.com/#get-an-account)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccount(accountID, callback);\n```\n\n* [`getAccountHistory`](https://docs.gdax.com/#get-account-history)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHistory(accountID, callback);\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHistory(accountID, {'before': 3000}, callback);\n```\n\n* [`getAccountHolds`](https://docs.gdax.com/#get-holds)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHolds(accountID, callback);\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHolds(accountID, {'before': 3000}, callback);\n```\n\n* [`buy`, `sell`](https://docs.gdax.com/#place-a-new-order)\n```javascript\n// Buy 1 BTC @ 100 USD\nvar buyParams = {\n  'price': '100.00', // USD\n  'size': '1',  // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.buy(buyParams, callback);\n\n// Sell 1 BTC @ 110 USD\nvar sellParams = {\n  'price': '110.00', // USD\n  'size': '1', // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.sell(sellParams, callback);\n```\n\n* [`cancelOrder`](https://docs.gdax.com/#cancel-an-order)\n```javascript\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.cancelOrder(orderID, callback);\n```\n\n* [`cancelOrders`](https://docs.gdax.com/#cancel-all)\n```javascript\nauthedClient.cancelOrders(callback);\n```\n\n* [`cancelAllOrders`](https://docs.gdax.com/#cancel-all)\n```javascript\n// `cancelOrders` may require you to make the request multiple times until\n// all the orders are deleted.\n\n// `cancelAllOrders` will handle making these requests for you asyncronously.\n// Also you can add a product_id param to only delete orders of that product\n\n// The response will be the response of the last call and the data will\n// have the order ID's of all your deleted orders\nauthedClient.cancelAllOrders({product_id: 'BTC-USD'}, callback);\n```\n\n* [`getOrders`](https://docs.gdax.com/#list-open-orders)\n```javascript\nauthedClient.getOrders(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getOrders({'after': 3000}, callback);\n```\n\n* [`getOrder`](https://docs.gdax.com/#get-an-order)\n```javascript\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.getOrder(orderID, callback);\n```\n\n* [`getFills`](https://docs.gdax.com/#list-fills)\n```javascript\nauthedClient.getFills(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getFills({'before': 3000}, callback);\n```\n\n* [`deposit`, `withdraw`](https://docs.gdax.com/#list-fills)\n```javascript\n// Deposit to your Exchange USD account from your Coinbase USD account.\nvar depositParamsUSD = {\n  'amount': '100.00', // USD,\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.deposit(depositParamsUSD, callback);\n// Withdraw from your Exchange USD account to your Coinbase USD account.\nvar withdrawParamsUSD = {\n  'amount': '100.00', // USD,\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsUSD, callback);\n\n// Deposit to your Exchange BTC account from your Coinbase BTC account.\nvar depositParamsBTC = {\n  'amount': '2.0', // BTC,\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.deposit(depositParamsBTC, callback);\n// Withdraw from your Exchange BTC account to your Coinbase BTC account.\nvar withdrawParamsBTC = {\n  'amount': '2.0', // BTC,\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsBTC, callback);\n```\n\n### Websocket client\n<<<<<<< e614fa20dfbc8ce07ff909ddfd96e559f8925ffd\nThe `WebsocketClient` allows you to connect and listen to the\n[exchange websocket messages](https://docs.gdax.com/#messages).\n=======\nThe `WebsocketClient` allows you to connect and listen to the\n[exchange websocket messages](https://docs.exchange.coinbase.com/#messages).\n>>>>>>> Add deprecation notice\n```javascript\nvar CoinbaseExchange = require('coinbase-exchange');\nvar websocket = new CoinbaseExchange.WebsocketClient();\nwebsocket.on('message', function(data) { console.log(data); });\n```\nThe following events can be emitted from the `WebsocketClient`:\n* `open`\n* `message`\n* `close`\n\n### Orderbook\n`Orderbook` is a data structure that can be used to store a local copy of the orderbook.\n```javascript\nvar CoinbaseExchange = require('coinbase-exchange');\nvar orderbook = new CoinbaseExchange.Orderbook();\n```\nThe orderbook has the following methods:\n* `state(book)`\n* `get(orderId)`\n* `add(order)`\n* `remove(orderId)`\n* `match(match)`\n* `change(change)`\n\n### Orderbook Sync\n`OrderbookSync` creates a local mirror of the orderbook on GDAX using\n`Orderbook` and `WebsocketClient` as described [here](https://docs.gdax.com/#real-time-order-book).\n\n```javascript\nvar CoinbaseExchange = require('coinbase-exchange');\nvar orderbookSync = new CoinbaseExchange.OrderbookSync();\nconsole.log(orderbookSync.book.state());\n```\n\n## Testing\n\n```bash\nnpm run test\nnpm run scan_packages\n```\n","starsCount":5,"created":"2015-01-31T02:04:21.858Z","modified":"2016-09-06T21:46:22.490Z","lastPublisher":{"name":"maksim","email":"maksimus16@gmail.com"},"owners":[{"name":"amacneil","email":"adrian@adrianmacneil.com"},{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"maksim","email":"maksimus16@gmail.com"},{"name":"peterldowns","email":"peterldowns@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"coinbase-exchange","_nodeVersion":"5.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/coinbase-exchange-0.2.2.tgz_1473198358758_0.8729100956115872"},"_npmUser":{"name":"maksim","email":"maksimus16@gmail.com"},"_npmVersion":"3.8.2","_rev":"1-3068121fcd475caf02e21c6bf4dce925","_shasum":"bee69f85ec513952f2cd433d0c72c832cdf83331","author":{"name":"Coinbase"},"bugs":{"url":"https://github.com/coinbase/coinbase-exchange-node/issues"},"contributors":[{"name":"Peter Downs","email":"peterldowns@gmail.com","url":"http://peterdowns.com"},{"name":"Maksim Stepanenko","email":"maksimus16@gmail.com","url":"http://maksim.ms"}],"directories":{"lib":"./lib"},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"bee69f85ec513952f2cd433d0c72c832cdf83331","tarball":"http://registry.npmjs.org/coinbase-exchange/-/coinbase-exchange-0.2.2.tgz"},"maintainers":[{"name":"amacneil","email":"adrian@adrianmacneil.com"},{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"maksim","email":"maksimus16@gmail.com"},{"name":"peterldowns","email":"peterldowns@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-06T21:46:22.490Z","created":"2015-01-31T02:04:21.858Z","0.1.0":"2015-01-31T02:04:21.858Z","0.2.0":"2015-04-01T18:38:58.943Z","0.2.1":"2015-11-04T22:05:53.794Z","0.2.2":"2016-09-06T21:45:59.012Z"},"users":{"estliberitas":true,"swak":true,"andrewtlove":true,"klap-webdevelopment":true,"gltr":true}}}