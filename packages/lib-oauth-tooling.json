{"name":"lib-oauth-tooling","version":"2.4.1","description":"A simple typescript based oauth tooling library","main":"./lib/src/index.js","typings":"./lib/src/index.d.ts","license":"MIT","keywords":["zalando","oauth2","express","node","service","rest","typescript"],"publishConfig":{"registry":"https://registry.npmjs.org/"},"files":["lib","README.md","LICENSE","package.json"],"engines":{"node":">=6.0"},"dependencies":{"body-parser":"1.17.2","btoa":"1.1.2","form-urlencoded":"2.0.4","http-status":"1.0.1","nock":"9.0.14","node-fetch":"1.7.1","q":"1.5.0","uuid":"3.1.0"},"devDependencies":{"@types/body-parser":"1.16.4","@types/chai":"4.0.1","@types/chai-as-promised":"0.0.31","@types/express":"4.0.36","@types/http-status":"0.2.29","@types/lolex":"1.5.31","@types/mocha":"2.2.41","@types/nock":"8.2.1","@types/node-fetch":"1.6.7","@types/q":"1.0.2","@types/uuid":"3.4.0","chai":"4.1.0","chai-as-promised":"7.1.1","coveralls":"2.13.1","express":"4.15.3","lolex":"1.6.0","mocha":"3.4.2","nyc":"11.0.3","tslint":"5.5.0","typescript":"2.4.2"},"scripts":{"test":"npm run build && mocha lib/test lib/integration-test --recursive","unit-test":"npm run build && mocha lib/test --recursive","integration-test":"npm run build && mocha lib/integration-test --recursive","test:coverage":"nyc npm run test","coverage":"npm run test:coverage && nyc report --reporter=text-lcov | coveralls","tslint":"tslint --type-check --project ./tsconfig.json 'src/**/*.ts' 'test/**/*.ts' 'integration-test/**/*.ts'","build":"rm -rf lib && tsc"},"nyc":{"lines":90,"statements":90,"functions":90,"branches":90,"exclude":["coverage/**/*.js","lib/integration-test/**/*","lib/src/index.js","lib/test/**/*","lib/src/types"],"reporter":["lcov","text","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"repository":"https://github.com/zalando-incubator/lib-oauth-tooling","gitHead":"7ab34fd261de64ccae5d78d6d0dcd07bb3c98595","homepage":"https://github.com/zalando-incubator/lib-oauth-tooling#readme","readme":"# lib-oauth-tooling\n\n[![Build Status](https://travis-ci.org/zalando-incubator/lib-oauth-tooling.svg)](https://travis-ci.org/zalando-incubator/lib-oauth-tooling)\n[![Coverage Status](https://coveralls.io/repos/github/zalando-incubator/lib-oauth-tooling/badge.svg)](https://coveralls.io/github/zalando-incubator/lib-oauth-tooling)\n[![npm download](https://img.shields.io/npm/dm/lib-oauth-tooling.svg?style=flat-square)](https://www.npmjs.com/package/lib-oauth-tooling)\n[![npm version](https://img.shields.io/npm/v/lib-oauth-tooling.svg?style=flat)](https://www.npmjs.com/package/lib-oauth-tooling)\n\nA simple typescript based library for supporting OAuth2 flows.\nCurrently the following flows are supported:\n\n* [Authorization Code Flow](https://tools.ietf.org/html/rfc6749#section-1.3.1)\n* [Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-1.3.3)\n* [Refresh token Grant](https://tools.ietf.org/html/rfc6749#section-6)\n* Express middlewares to simplify authentication/authorization\n* `TokenCache` service to manage access tokens in your application\n\nSee [STUPS documentation](http://stups.readthedocs.org/en/latest/user-guide/access-control.html#implementing-a-client-asking-resource-owners-for-permission) and [OAuth2 documentation](https://tools.ietf.org/html/rfc6749) for more information.\n\n\n## Migrating to 2.x.x\n\nIf you depend on the `realm` property you now have to pass the value via the `queryParams` parameters in `OAuthConfig`:\n\n```typescript\n// will NOT work anymore:\ngetAccessToken({\n  // all the other config\n  // ...\n  realm: EMPLOYEES_REALM,\n})\n.then(token: Token => {\n  // ...\n});\n\n// instead use this:\ngetAccessToken({\n  // all the other config\n  // ...\n  queryParams: { realm: '/employees' }\n})\n.then(token: Token => {\n  // ...\n});\n```\n\nSee the [changelog](#changelog) for more information.\n\n## Usage\n\nNote: `node >= 6.0.0` required to consume this library.\n\nRun `npm install lib-oauth-tooling`.\n\nImport a member of this lib like so (of course ES5 syntax is working as well...):\n\n\n```typescript\nimport {\n    TokenCache,\n    handleOAuthRequestMiddleware,\n    requireScopesMiddleware,\n    ...\n} from 'lib-oauth-tooling';\n```\n\n#### TokenCache(tokenConfig: { [key: string]: string[] }, oauthConfig: OAuthConfig)\n\nClass to request and cache tokens on client-side.\n\n```typescript\nconst tokenCache = new TokenCache({\n  'service-foo': ['foo.read', 'foo.write'],\n  'service-bar': ['bar.read']\n}, oAuthConfig);\n\ntokenCache.get('service-foo')\n.then((token: Token) => {\n  console.log(token.access_token);\n});\n```\n\n`oauthConfig`:\n* `credentialsDir` string\n* `grantType` string (`AUTHORIZATION_CODE_GRANT` | `PASSWORD_CREDENTIALS_GRANT`)\n* `accessTokenEndpoint` string\n* `tokenInfoEndpoint` string - mandatory for TokenCache\n* `scopes` string[] optional\n* `queryParams` {} optional\n* `redirect_uri` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n* `code` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n\n#### handleOAuthRequestMiddleware(options: MiddlewareOptions)\n\nExpress middleware to extract and validate an access token. It attaches the scopes matched by the token to the request (`request.scopes`) for further usage.\nIf the token is not valid the request is rejected (with 401 Unauthorized).\n\n```typescript\napp.use(handleOAuthRequestMiddleware({\n    publicEndpoints: ['/heartbeat', '/status'],\n    tokenInfoEndpoint: 'auth.example.com/tokeninfo'\n});\n```\n\n`options`:\n* `publicEndpoints` string[]\n* `tokenInfoEndpoint` string\n\n#### requireScopesMiddleware(scopes: string[])\n\nSpecifies the scopes needed to access an endpoint. Assumes that there is an `request.scopes` property (as attached by `handleOAuthRequestMiddleware`) to match the required scopes against.\nIf the the requested scopes are not matched request is rejected (with 403 Forbidden).\n\n```typescript\napp.get('/secured/route', requireScopesMiddleware(['scopeA', 'scopeB']), (request, response) => {\n    // do your work...\n})\n```\n\n#### getTokenInfo(tokenInfoEndpoint: string, accessToken: string): Promise<Token>\n\nMakes a request to the `tokenInfoEndpoint` to validate the given `accessToken`.\n\n```typescript\ngetTokenInfo(tokenInfoEndpoint, accessToken)\n.then((token: Token) => {\n  console.log(token.access_token);\n})\n.catch((err) => {\n  console.log(err);\n});\n```\n\nType `Token` is defined like:\n\n```typescript\ninterface Token {\n  access_token: string;\n  expires_in?: number;\n  scope?: string[];\n  token_type?: string;\n  local_expiry?: number;\n  [key: string]: {};\n}\n```\n\n#### getAccessToken(options: OAuthConfig): Promise<Token>\n\nHelper function to get an access token for the specified scopes.\n\n```typescript\ngetAccessToken(options)\n.then((token: Token) => {\n  console.log(token.access_token);\n})\n.catch((err) => {\n  console.log(err);\n});\n```\n\n`options`:\n* `credentialsDir` string\n* `grantType` string (`AUTHORIZATION_CODE_GRANT` | `PASSWORD_CREDENTIALS_GRANT` | `REFRESH_TOKEN_GRANT`)\n* `accessTokenEndpoint` string\n* `scopes` string optional\n* `queryParams` {} optional\n* `redirect_uri` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n* `code` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n* `refreshToken` string optional (required with REFRESH_TOKEN_GRANT)\n\n#### AUTHORIZATION_CODE_GRANT\n\nString constant specifying the Authorization Code Grant type.\n\n#### PASSWORD_CREDENTIALS_GRANT\n\nString constant specifying the Resource Owner Password Credentials Grant type.\n\n#### REFRESH_TOKEN_GRANT\n\nString constant specifying the Refresh Token Grant type.\n\n## Mock tooling\n\nIf you want to test oAuth locally without being able to actually call real endpoints this library provides some tooling.\n\n#### mockTokenInfoEndpoint(options: MockOptions)\n\nMocks a `tokeninfo` endpoint.\n\n```typescript\nmockTokeninfoEndpoint({\n  url: 'http://some.oauth.endpoint/tokeninfo',\n  tokens: [{\n    access_token: 'someToken123',\n    scope: ['uid', 'something.read', 'something.write']\n  }],\n  times: 1\n});\n```\n\n`options`:\n* `url` string (url of the `tokeninfo` endpoint)\n* `tokens` any optional (list of valid tokens)\n* `times` number optional (for how many times/calls the endpoint is mocked, default is `Number.MAX_SAFE_INTEGER`)\n\n#### mockAccessTokenEndpoint(options: MockOptions)\n\nMocks a `access_token` endpoint.\n\n```typescript\nmockAccessTokenEndpoint({\n  url: 'http://some.oauth.endpoint/access_token',\n  times: 1\n});\n```\n\n`options`:\n* `url` string (url of the `access_token` endpoint)\n* `times` number optional (for how many times/calls the endpoint is mocked, default is `Number.MAX_SAFE_INTEGER`)\n\n#### cleanMock()\n\nCleans all `nock` mocks (not only from this lib, really ALL) and given tokens.\nHelpful when having multiple tests in a test suite, you can call `cleanMock()` in the `afterEach()` callback for example.\n\n```typescript\ncleanMock();\n```\n\n\n## Development\n\n* clone this repo\n* `npm install`\n* to build: `tsc`\n* to lint: `npm run tslint`\n\n\n## Testing\n\n* `npm test` - runs all tests\n* `npm run unit-test` - runs unit tests\n* `npm run integration-test` - runs integration tests\n\n## Changelog\n\n#### `2.0.0` - **BREAKING**\n\nThe (zalando-specific) `realm` property was removed from `OAuthConfig`. Also, the corresponding constants (`SERVICES_REALM` and `EMPLYEES_REALM`) were removed. Instead, you can add the realm (and arbitrary other query parameters) via the `queryParams` property in `OAuthConfig`.\n\n#### `1.0.0` - **BREAKING**\n\nThe signature of `requireScopesMiddleware` is now incompatible with previous versions, `precedenceFunction?` is now part of `precedenceOptions?`.\n\n## License\n\nMIT\n","versions":[{"number":"0.19.0","date":"2016-09-14T09:27:34.631Z"},{"number":"0.19.2","date":"2016-09-14T09:42:12.020Z"},{"number":"0.21.0","date":"2016-09-14T10:11:07.194Z"},{"number":"0.22.0","date":"2016-09-14T12:15:34.164Z"},{"number":"0.24.0","date":"2016-10-24T11:08:43.893Z"},{"number":"0.25.0","date":"2016-10-24T11:15:07.675Z"},{"number":"0.26.3","date":"2016-11-02T14:17:59.790Z"},{"number":"0.27.0","date":"2017-01-27T09:42:14.739Z"},{"number":"2.0.0-alpha","date":"2017-05-02T09:29:48.223Z"},{"number":"2.0.0","date":"2017-05-03T06:53:08.550Z"},{"number":"2.4.0-alpha","date":"2017-07-12T11:52:11.837Z"},{"number":"2.4.0-beta","date":"2017-07-14T08:34:31.081Z"},{"number":"2.4.0","date":"2017-07-18T13:25:12.080Z"},{"number":"2.4.1","date":"2017-07-20T18:24:01.149Z"}],"starsCount":0,"created":"2016-09-14T09:27:34.631Z","modified":"2017-07-20T18:24:01.149Z","lastPublisher":{"name":"iso50","email":"0xdead10cc@gmx.de"},"owners":[{"name":"bzums","email":"mail@bzums.de"},{"name":"iso50","email":"0xdead10cc@gmx.de"},{"name":"retro64","email":"wegwerfaddresse@gmail.com"}],"other":{"_attachments":{},"_id":"lib-oauth-tooling","_nodeVersion":"8.1.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lib-oauth-tooling-2.4.1.tgz_1500575039982_0.34387674066238105"},"_npmUser":{"name":"iso50","email":"0xdead10cc@gmx.de"},"_npmVersion":"5.0.3","_rev":"13-59ac3e8705ed7077f8fc4e79fd69c734","bugs":{"url":"https://github.com/zalando-incubator/lib-oauth-tooling/issues"},"contributors":[{"name":"Jörg Dotzki","email":"joerg.dotzki@zalando.de","url":"https://github.com/ISO50"},{"name":"Alexander Dellagi","email":"alexander.dellagi@zalando.de"},{"name":"Bastian Sieker","email":"bastian.sieker@zalando.de","url":"https://github.com/bzums"},{"name":"Markus Görlich","email":"markus.goerlich@zalando.de","url":"https://github.com/retro64"},{"name":"Matthias Achatz","email":"matthias.achatz@zalando.de"}],"directories":{},"dist-tags":{"latest":"2.4.1"},"dist":{"integrity":"sha512-wf/mlYWbpFLYK1wPOgl9cu10LiNwqKfeozVudNyEALEgDlqMBo5vVEJVfS7o28IDIS9d5yWQjejriy/U6nfnpw==","shasum":"c5eb2a1ba82e1064dad4b9e8ebf1424185fe6a6d","tarball":"https://registry.npmjs.org/lib-oauth-tooling/-/lib-oauth-tooling-2.4.1.tgz"},"maintainers":[{"name":"bzums","email":"mail@bzums.de"},{"name":"iso50","email":"0xdead10cc@gmx.de"},{"name":"retro64","email":"wegwerfaddresse@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-20T18:24:01.149Z","created":"2016-09-14T09:27:34.631Z","0.19.0":"2016-09-14T09:27:34.631Z","0.19.2":"2016-09-14T09:42:12.020Z","0.21.0":"2016-09-14T10:11:07.194Z","0.22.0":"2016-09-14T12:15:34.164Z","0.24.0":"2016-10-24T11:08:43.893Z","0.25.0":"2016-10-24T11:15:07.675Z","0.26.3":"2016-11-02T14:17:59.790Z","0.27.0":"2017-01-27T09:42:14.739Z","2.0.0-alpha":"2017-05-02T09:29:48.223Z","2.0.0":"2017-05-03T06:53:08.550Z","2.4.0-alpha":"2017-07-12T11:52:11.837Z","2.4.0-beta":"2017-07-14T08:34:31.081Z","2.4.0":"2017-07-18T13:25:12.080Z","2.4.1":"2017-07-20T18:24:01.149Z"},"users":{}}}