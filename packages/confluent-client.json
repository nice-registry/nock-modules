{"name":"confluent-client","version":"0.1.0","description":"A Javascript wrapper for the Confluent Kafka REST API","main":"lib/client.js","scripts":{"test":"mocha","test-e2e":"node test/e2e/e2e-test.js && node test/e2e/e2e-test-streaming.js"},"repository":"https://github.com/blikkhq/confluent-rest-js","keywords":["confluent","kafka"],"license":"ISC","homepage":"https://github.com/blikkhq/confluent-rest-js","dependencies":{"bluebird":"^2.9.14","chai":"^2.1.2","nock":"^1.1.0","node-uuid":"^1.4.3","superagent":"^1.1.0","underscore":"^1.8.2"},"gitHead":"5f74caad824016a6a5d638aabeaca1e8d20ea294","versions":[{"number":"0.1.0","date":"2015-03-21T23:51:44.628Z"}],"readme":"[![Circle CI](https://circleci.com/gh/blikkhq/confluent-kafka-client-js.svg?style=svg)](https://circleci.com/gh/blikkhq/confluent-kafka-client-js)\n\nA lightweight Javascript wrapper for the [Confluent Kafka REST API](http://confluent.io/docs/current/kafka-rest/docs/intro.html). \n\n**This library is under construction, so there will be bugs and missing features.(* Pull requests welcome!\n\n## Usage\n\nThe example below show standard node.js callback-based methods. The library can also be promisified with [Bluebird](https://github.com/petkaantonov/bluebird). Take a look at the tests to see what thay may look like.\n\n```javascript\nvar client = require('confluent-kafka-client');\nclient.setHost('http://your-kafka-rest-api.io:8082');\n\nvar valueSchema = {\n  name: 'int',\n  type: 'int'\n};\n\n// Produce some messages\nclient.topics.produceMessages('YOUR_TOPIC', {\n  value_schema: JSON.stringify(valueSchema),\n  records: [{value: 10}, {value: 100}]\n}, function(err, res){\n  // ...\n});\n\n// Create a consumer\nclient.consumers.create('YOUR_CONSUMER_GROUP', \n  {'auto.offset.reset': 'smallest'}, function(err, res){\n  return client.consumer(res.instance_id).consume('YOUR_TOPIC', function(err, data){\n    console.log(data);\n  });\n});\n\n```\n\n## Polling/Streaming consumer\n\nA wrapper around the consumer that periodically polls for new records.\n\n```javascript\nvar client = require('confluent-kafka-client');\nclient.setHost('http://your-kafka-rest-api.io:8082');\n\n// 500ms poll interval\nclient.consumers.createStreamingConsumerAsync(500, 'YOUR_TOPIC', \n  'YOUR_CONSUMER_GROUP', {'auto.offset.reset': 'smallest'}, function(err, streamingConsumer){\n  streamingConsumer.start();\n  streamingConsumer.on('data', function(data){\n    console.log(data);\n  });\n  streamingConsumer.on('error', function(error){\n    console.log(error);\n  });\n});\n```\n\n\n## TODO\n\n- Implement the [Partitions API](http://confluent.io/docs/current/kafka-rest/docs/api.html#partitions)\n- Implement the [Brokers API](http://confluent.io/docs/current/kafka-rest/docs/api.html#brokers)\n- Implement request batching features [as described in the documentation](http://confluent.io/docs/current/app-development.html#non-java-applications-rest-proxy)\n- Be smart about re-using schema ids when possible?","created":"2015-03-21T23:51:44.628Z","modified":"2015-03-21T23:51:44.628Z","lastPublisher":{"name":"dennybritz","email":"dennybritz@gmail.com"},"owners":[{"name":"dennybritz","email":"dennybritz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"confluent-client","_nodeVersion":"0.12.0","_npmUser":{"name":"dennybritz","email":"dennybritz@gmail.com"},"_npmVersion":"2.5.1","_rev":"1-972f5c916c810bd2d53f42a339f3d7b5","_shasum":"340bef9ff619f8a9676b66e097be53e110d8b6e6","author":{"name":"Denny Britz"},"bugs":{"url":"https://github.com/blikkhq/confluent-rest-js/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"340bef9ff619f8a9676b66e097be53e110d8b6e6","tarball":"http://registry.npmjs.org/confluent-client/-/confluent-client-0.1.0.tgz"},"maintainers":[{"name":"dennybritz","email":"dennybritz@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-03-21T23:51:44.628Z","created":"2015-03-21T23:51:44.628Z","0.1.0":"2015-03-21T23:51:44.628Z"}}}