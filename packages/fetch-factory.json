{"name":"fetch-factory","version":"0.2.1","description":"A wrapper around the new `fetch` API to make creating services to talk to APIs easier.","main":"lib/index.js","scripts":{"browserify":"mkdir -p dist && browserify lib/browserify-entry.js -o dist/fetch-factory.js -s fetchFactory","minify":"uglifyjs dist/fetch-factory.js > dist/fetch-factory.min.js","build":"npm run babel && npm run browserify && npm run minify","babel":"babel -d lib src","prepublish":"npm run build","test":"babel-tape-runner spec/*.spec.js"},"license":"ISC","dependencies":{"es6-promise":"^3.0.2","isomorphic-fetch":"^2.1.1","lodash":"^3.10.1","nock":"^2.18.0","query-string":"^2.4.1","url-pattern":"^0.10.0"},"devDependencies":{"babel-cli":"^6.1.2","babel-core":"^6.1.2","babel-preset-es2015":"^6.1.2","babel-tape-runner":"^1.3.0","browserify":"^12.0.1","nock":"^2.17.0","sinon":"^1.16.1","tape":"^4.2.0","uglify-js":"^2.5.0"},"gitHead":"4c14ee00e6340ed1da70e35dc3d73b5ba3a6d9d8","versions":[{"number":"0.0.1","date":"2015-09-04T13:13:48.194Z"},{"number":"0.0.2","date":"2015-09-04T13:18:42.142Z"},{"number":"0.0.3","date":"2015-11-10T13:43:06.584Z"},{"number":"0.1.0","date":"2015-11-11T16:25:32.630Z"},{"number":"0.2.0","date":"2015-12-08T10:42:31.907Z"},{"number":"0.2.1","date":"2015-12-08T10:48:01.325Z"}],"readme":"# fetch-factory\n\nA wrapper around the new `fetch` API to make creating services to talk to APIs easier.\n\n##Â Example\n\n```js\nvar fetchFactory = require('fetch-factory');\n\nvar Users = fetchFactory.create({\n    url: 'http://api.mysite.com/users/:id',\n}, {\n    find: { method: 'GET' },\n    create: { method: 'POST' },\n});\n\nUsers.find(); // GET /users\n\nUsers.find({\n    params: { id: 123 },\n}); // GET /users/123\n\nUsers.create({\n    data: {\n        name: 'Jack',\n    },\n}); // POST /users with JSON stringified obj { name: 'jack' }\n```\n\n## Install\n\n```\nnpm install fetch-factory\n```\n\nConsumable in the client through jspm, Webpack or Browserify.\n\nYou can also grab `dist/fetch-factory.js` or `dist/fetch-factory.min.js` which is a browser build. It exposes `global.fetchFactory`. `example/index.html` shows how you would use this.\n\nNote that this library assumes a global `fetch` and `Promise` object. If you need to polyfill these, the following are recommended:\n\n- [github/fetch](https://github.com/github/fetch) `window.fetch` polyfill\n- [jakearchibald/es6-promise](https://github.com/jakearchibald/es6-promise) `Promise` polyfill.\n\n## Configuration\n\nConfiguration for a particular request can be set in one of three places:\n\n- in the config object that's the first argument to `fetchFactory.create`\n- in an object that you pass when telling fetch-factory what methods to create\n- in the call to the method that fetch factory created\n\nConfiguration set further down the chain will override configuration set previously. For example:\n\n```js\nvar UserFactory = fetchFactory.create({\n    url: 'http://api.mysite.com/users/:id',\n    method: 'GET',\n}, {\n    find: {},\n    create: { method: 'POST' },\n});\n```\n\nWhen `UserFactory.find` is called, it will make a `GET` request, because the default configuration for `UserFactory` was given `method: 'GET'`. However, when `UserFactory.create` is called, it will make a `POST` request, because configuration was passed that is specific to that method. Although in reality you never need to, you could call `UserFactory.find({ method: 'POST' })`, which would cause the `find` method to make a `POST` request that time, because configuration passed in when a method is invoked overrides any set before it.\n\n## POST Requests\n\nWhen a method defined by fetch-factory makes a `POST` request, it assumes that you'd like to POST JSON and sets some extra configuration:\n- the `Accept` header of the request is set to `application/json`\n- the `Content-Type` header of the request is set to `application/json`\n- if you pass in a `data` parameter, that is converted into JSON and sent as the body of the request\n\n## Shortcut Methods\n\nThere's a few methods that we've come to use often with our factories: `find`, `create` and `update`. fetch-factory comes with these definitions by default, so you can just tell it which ones you'd like to create:\n\n```js\nvar UserFactory = fetchFactory.create({\n    url: '/users/:id',\n    methods: ['find', 'create'],\n});\n```\n\n## Interceptors\n\nfetch-factory also supports the concept of interceptors that can take a request and manipulate it before passing it on.\n\n### Request Interceptors\n\nIf you need to apply a transformation to every request before it is made (for example, adding an authorisation header), you can use a request interceptor. These can be sync or async. You can define a single request interceptor, or an array of multiple. An interceptor is expected to return the modified request object, or a new object with three properties:\n\n- `headers`: an object of key value pairs mapping headers to values\n- `body`: the string representing the request body, or `null`.\n- `method`: the method of the request\n\n```js\nvar UserFactory = fetchFactory.create({\n    url: 'http://api.mysite.com/users/:id',\n    method: 'GET',\n    interceptors: {\n        request: function(request) {\n            request.headers['Authorisation']: 'Bearer ACCESS_TOKEN123';\n            return request;\n        },\n    },\n}, {\n    find: {},\n});\n\nUserFactory.find().then(function(data) {\n    console.log(data.name) // 'bob'\n});\n```\n\nBy using an interceptor in this way you can avoid repeating the authorisation logic accross your frontend code base.\n\n### Response Interceptors\n\nBy default, fetch-factory will call its default response interceptor, which simply takes the stream returned by `fetch` and consumes it as JSON, returning a JavaScript object. You can override this by passing an `interceptors` object with a `response` key:\n\n```js\nvar UserFactory = fetchFactory.create({\n    url: 'http://api.mysite.com/users/:id',\n    method: 'GET',\n    interceptors: {\n        response: function(data) {\n            return { name: 'bob' };\n        },\n    },\n}, {\n    find: {},\n});\n\nUserFactory.find().then(function(data) {\n    console.log(data.name) // 'bob'\n});\n```\n\nA time when you might want to override the default response interceptor is if you need access to extra information on the response, such as headers. In this case fetch-factory's default interceptor will be insufficient, and you should override it to simply pass the full request through:\n\n```js\nvar UserFactory = fetchFactory.create({\n    url: 'http://api.mysite.com/users/:id',\n    method: 'GET',\n    interceptors: {\n        response: function(response) { return response; },\n    },\n}, {\n    find: {},\n});\n\nUserFactory.find().then(function(response) {\n    console.log(response.headers.get('Content-Type'));\n});\n```\n\n\n\n## Changelog\n\n##### V0.2.1 - 8/12/2015\n- fix issue that lead to port numbers in URLs not working - thanks @copyhold\n\n##### V0.2.0 - 8/12/2015\n- fix isssue that lead to being unable to create more than one factory\n\n##### V0.1.0 - 11/11/2015\n- first release\n\n","created":"2015-09-04T13:13:48.194Z","modified":"2015-12-08T10:48:01.325Z","lastPublisher":{"name":"jackfranklin","email":"jack@jackfranklin.net"},"owners":[{"name":"jackfranklin","email":"jack@jackfranklin.net"}],"other":{"_attachments":{},"_from":".","_id":"fetch-factory","_nodeVersion":"4.2.1","_npmUser":{"name":"jackfranklin","email":"jack@jackfranklin.net"},"_npmVersion":"2.14.8","_rev":"1-d6ec894e59a4db33f2805f09afac2546","_shasum":"a0562d635ad11156886885604518423ce6a43f2b","author":"","directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"a0562d635ad11156886885604518423ce6a43f2b","tarball":"http://registry.npmjs.org/fetch-factory/-/fetch-factory-0.2.1.tgz"},"maintainers":[{"name":"jackfranklin","email":"jack@jackfranklin.net"}],"readmeFilename":"README.md","time":{"modified":"2015-12-08T10:48:01.325Z","created":"2015-09-04T13:13:48.194Z","0.0.1":"2015-09-04T13:13:48.194Z","0.0.2":"2015-09-04T13:18:42.142Z","0.0.3":"2015-11-10T13:43:06.584Z","0.1.0":"2015-11-11T16:25:32.630Z","0.2.0":"2015-12-08T10:42:31.907Z","0.2.1":"2015-12-08T10:48:01.325Z"}}}