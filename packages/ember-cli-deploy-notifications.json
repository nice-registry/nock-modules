{"name":"ember-cli-deploy-notifications","version":"0.2.0","description":"Ember CLI Deploy plugin to notify external services during deployments.","scripts":{"build":"ember build","start":"ember server","test":"node tests/runner.js"},"repository":"https://github.com/simplabs/ember-cli-deploy-notifications","engines":{"node":">= 0.10.0"},"license":"MIT","devDependencies":{"broccoli-asset-rev":"^2.2.0","ember-cli":"1.13.13","ember-cli-app-version":"^1.0.0","ember-cli-content-security-policy":"0.4.0","ember-cli-dependency-checker":"^1.1.0","ember-cli-htmlbars":"^1.0.1","ember-cli-htmlbars-inline-precompile":"^0.3.1","ember-cli-ic-ajax":"0.2.4","ember-cli-inject-live-reload":"^1.3.1","ember-cli-qunit":"^1.0.4","ember-cli-release":"0.2.8","ember-cli-sri":"^1.2.0","ember-cli-uglify":"^1.2.0","ember-data":"1.13.15","ember-disable-proxy-controllers":"^1.0.1","ember-export-application-global":"^1.0.4","ember-disable-prototype-extensions":"^1.0.0","ember-try":"~0.0.8"},"keywords":["ember-addon","ember-cli-deploy-plugin"],"dependencies":{"chai":"^3.3.0","chai-as-promised":"^5.1.0","core-object":"^1.1.0","ember-cli-babel":"^5.1.5","ember-cli-deploy-plugin":"0.2.0","glob":"^5.0.15","lodash":"^3.10.1","mocha":"^2.3.3","nock":"^2.15.0","request":"^2.65.0"},"ember-addon":{"configPath":"tests/dummy/config"},"gitHead":"9000cc1f95d153b0ab5a8d27c618f513d76353e3","homepage":"https://github.com/simplabs/ember-cli-deploy-notifications#readme","deprecated":"ember-cli-deploy-notifications has been renamed to ember-cli-deploy-webhooks. Please switch to that package.","versions":[{"number":"0.1.0-beta.1","date":"2015-10-20T15:39:25.982Z"},{"number":"0.1.0-beta.2","date":"2015-10-21T10:50:03.241Z"},{"number":"0.1.0","date":"2015-11-12T13:23:21.301Z"},{"number":"0.2.0","date":"2015-12-03T14:47:45.319Z"}],"readme":"# ember-cli-deploy-notifications [![Build Status](https://travis-ci.org/simplabs/ember-cli-deploy-notifications.svg)](https://travis-ci.org/simplabs/ember-cli-deploy-notifications)\n\n> An ember-cli-deploy plugin to notify external services (e.g. an error\n> tracking service) of successful hook executions in your deploy pipeline.\n\n[![](https://ember-cli-deploy.github.io/ember-cli-deploy-version-badges/plugins/ember-cli-deploy-notifications.svg)](http://ember-cli-deploy.github.io/ember-cli-deploy-version-badges/)\n\n## What is an ember-cli-deploy plugin?\n\nA plugin is an addon that can be executed as a part of the ember-cli-deploy pipeline. A plugin will implement one or more of the ember-cli-deploy's pipeline hooks.\n\nFor more information on what plugins are and how they work, please refer to the [Plugin Documentation][1].\n\n## Quick Start\n\nTo get up and running quickly, do the following:\n\n- Install this plugin\n\n```bash\n$ ember install ember-cli-deploy-notifications\n```\n- Place the following configuration into `config/deploy.js`\n\n\n```javascript\nENV.notifications = {\n  services: {\n    \"<some-key>\": {\n      url: <service-url>,\n      headers: {\n        // custom headers go here\n      },\n      method: '<http-method>', // defaults to 'POST'\n      body: function(/*context*/) {\n        // return any object that should be passed as request body here\n        return {\n          apiKey: <your-api-key>\n        };\n      }\n      didActivate: true\n    }\n  }\n}\n```\n\n- Run the pipeline\n\n```bash\n$ ember deploy\n```\n\n## ember-cli-deploy Hooks Implemented\n\nFor detailed information on what plugin hooks are and how they work, please refer to the [Plugin Documentation][1].\n\n- `configure`\n- `setup`\n\n_Hooks that can be used for notifications:_\n\n- `willDeploy`\n- `willBuild`\n- `build`\n- `didBuild`\n- `willPrepare`\n- `prepare`\n- `didPrepare`\n- `willUpload`\n- `upload`\n- `didUpload`\n- `willActivate`\n- `activate`\n- `didActivate`\n- `teardown`\n- `fetchRevisions`\n- `displayRevisions`\n- `didFail`\n\n## Configuration Options\n\nFor detailed information on how configuration of plugins works, please refer to the [Plugin Documentation][1].\n\n###services\n\nAn object that identifies all webhooks you want to notify. You will put a key for every service you want to call on deploy here.\n\nA `service` configuration needs to provide four properties as configuration for\n`ember-cli-deploy-notifications` to know how to notify the service correctly:\n\n- `url` The url to call\n- `method` The HTTP-method to use for the call (defaults to `'POST'`)\n- `headers` A property to specify custom HTTP-headers (defaults to `{}`)\n- `body` The body of the request\n\n<hr/>\n**Whenever one of these properties returns a _falsy_ value, the service will _not_ be\ncalled.**\n<hr/>\n\nAll these properties can return a value directly or can be implemented as\na function which returns the value for this property and gets called with the\ndeployment context. The `this` scope will be set to the service config object\nitself.\n\n*Example:*\n\n```javascript\nENV.notifications = {\n  services: {\n    slack: {\n      webhookURL: '<your-webhook-url>',\n      url: function() {\n        return this.webhookURL;\n      },\n      method: 'POST',\n      headers: {},\n      body: function(context) {\n        var deployer = context.deployer;\n\n        return {\n          text: deployer + ' deployed a new revision'\n        }\n      }\n    }\n  }\n};\n```\n\nAdditionally you have to specify on which hook to notify the service in the\ndeploy pipeline. To do this you can simply pass a truthy value as a property\nnamed the same as the hook at which you want to notify the service. This can\nals be used to override the defaults that you specify on a service.\n\n*Example:*\n\n```javascript\n  ENV.notifications = {\n    services: {\n      slack: {\n        url: 'your-webhook-url',\n        method: 'POST',\n        headers: {},\n        body: {\n          text: 'A new revision was activated!'\n        },\n        didActivate: true\n        didDeploy: {\n          body: {\n            text: 'Deployment successful!'\n          }\n        },\n        didFail: {\n          body: {\n            text: 'Deployment failed!'\n          }\n        }\n      }\n    }\n  };\n```\n\nThere are two types of services you can specify in the `services` property:\n\na)  __preconfigured services__\n\nPreconfigured services only need to be passed service specific configuration\noptions. This depends on the service (see below) but you can also provide all\nother service configuration properties that were explained before to override\nthe defaults.\n\n*Example:*\n\n```javascript\nENV.notifications = {\n  services: {\n    bugsnag: {\n      url: 'https://bugsnag.simplabs.com/deploy',\n      apiKey: '1234',\n      didActivate: true\n    }\n  }\n};\n```\n\nPreconfigured services aren't very special but maintainers and contributors\nhave already provided a base configuration that can be overridden by the\nplugin users. This for example is basically the default implementation that is\nalready configured for the slack service:\n\n```javascript\n  ENV.notifications.services = {\n    // ...\n    slack: {\n      url: function() {\n        return this.webhookURL;\n      },\n      method: 'POST',\n      headers: {}\n    }\n  };\n```\n\nUsers then only have to provide `webhookURL` and a `body`-property for the\nhooks that should send a message to slack.\n\n*Example:*\n\n```javascript\n  ENV.notifications.services = {\n    slack: {\n      webhookURL: '<your-slack-webhook-url>',\n      didActivate: {\n        body: {\n          text: 'A new revision was activated!'\n        }\n      }\n    }\n  };\n```\n\nCurrently available preconfigured services are:\n\n- `bugsnag` [An error-tracking service](https://bugsnag.com)\n- `slack` [The popular messaging app](https://slack.com/)\n\n####bugsnag\n\nTo configure bugsnag you need to at least provide an `apiKey` and specify\na hook on which bugsnag should be notified of a deployment. You'll most likely\nwant to notify bugsnag of a deployment in the `didActivate`-hook as this is the\nhook that actually makes a new version of your app available to your users.\n\n*Example:*\n\n```javascript\n  ENV.notifications.services = {\n    bugsnag: {\n      apiKey: '<your-api-key>',\n      didActivate: true\n    }\n  };\n```\n\n__Required configuration__\n\n- `apiKey` The api-key to send as part of the request payload (identifies the\n  application)\n\n__Default configuration__\n\n```\n  ENV.notifications.services = {\n    bugsnag: {\n      url: 'http://notify.bugsnag.com/deploy',\n      method: 'POST',\n      headers: {},\n      body: function() {\n        var apiKey = this.apiKey;\n\n        if (!apiKey) { return; }\n\n        return {\n          apiKey: this.apiKey,\n          releaseStage: process.env.DEPLOY_TARGET\n        }\n      }\n    }\n  }\n```\n\n####slack\n\n*Example:*\n\n```javascript\n  ENV.notifications.services = {\n    slack: {\n      webhookURL: '<your-slack-webhook-url>',\n      didActivate: {\n        body: {\n          text: 'A new revision was activated!'\n        }\n      }\n    }\n  };\n```\n\n__Required configuration__\n\n- `webhookURL` The [incoming webhook's](https://api.slack.com/incoming-webhooks)-url that should be called.\n\n- `body` You need to provide a payload that gets send to slack. Please refer to\n  the [documentation](https://api.slack.com/incoming-webhooks) on how message\npayloads can be used to customize the appearance of a message in slack. At\nleast you have to provide a `text` property in the payload.\n\n__Default configuration__\n\n```javascript\n  ENV.notifications.services = {\n    // ...\n    slack: {\n      url: function() {\n        return this.webhookURL;\n      },\n      method: 'POST',\n      headers: {}\n    }\n  };\n```\n\nb) __custom services__\n\nCustom services need to be configured with a `url` and `body` property.\n`headers` will default to `{}` and `method` will default to `'POST'`. All these\noptions can be overridden as described before of course.\n\n*Example:*\n\n```javascript\nENV.notifications = {\n  services: {\n    simplabs: {\n      url: 'https://notify.simplabs.com/deploy',\n      body: function(context) {\n        var deployer = context.deployer;\n\n        return {\n          secret: 'supersecret',\n          deployer: deployer\n        }\n      },\n      didActivate: true\n    },\n    newRelic: {\n      url: 'https://api.newrelic.com/deployments.json',\n      headers: {\n        \"api-key\": \"<your-api-key>\"\n      },\n      method: 'POST',\n      body: {\n        deployment: {\n          // ...\n        }\n      },\n      didDeploy: true\n    }\n  }\n};\n```\n\n###httpClient\n\nThe underlying http-library used to send requests to the specified services. This allows users to customize the library that's used for http requests which is useful in tests but might be useful to some users as well. By default the plugin uses [request](https://github.com/request/request).\n\n## Running Tests\n\n- `npm test`\n\n[1]: http://ember-cli.github.io/ember-cli-deploy/plugins \"Plugin Documentation\"\n\n## License\n\nEmber Simple Auth is developed by and &copy;\n[simplabs GmbH](http://simplabs.com) and contributors. It is released under the\n[MIT License](https://github.com/simplabs/ember-simple-auth/blob/master/LICENSE).\n","created":"2015-10-20T15:39:25.982Z","modified":"2016-03-11T11:38:06.756Z","lastPublisher":{"name":"simplabs","email":"info@simplabs.com"},"owners":[{"name":"simplabs","email":"info@simplabs.com"}],"other":{"_attachments":{},"_from":".","_id":"ember-cli-deploy-notifications","_nodeVersion":"0.12.7","_npmUser":{"name":"simplabs","email":"info@simplabs.com"},"_npmVersion":"2.11.3","_rev":"1-39ee32ec01d5f2ffbc11065e24418d87","_shasum":"7104b7bd1a337e444555e811d92b6da50a5a30ba","author":{"name":"simplabs GmbH"},"bugs":{"url":"https://github.com/simplabs/ember-cli-deploy-notifications/issues"},"directories":{"doc":"doc","test":"tests"},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"7104b7bd1a337e444555e811d92b6da50a5a30ba","tarball":"http://registry.npmjs.org/ember-cli-deploy-notifications/-/ember-cli-deploy-notifications-0.2.0.tgz"},"maintainers":[{"name":"simplabs","email":"info@simplabs.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-11T11:38:06.756Z","created":"2015-10-20T15:39:25.982Z","0.1.0-beta.1":"2015-10-20T15:39:25.982Z","0.1.0-beta.2":"2015-10-21T10:50:03.241Z","0.1.0":"2015-11-12T13:23:21.301Z","0.2.0":"2015-12-03T14:47:45.319Z"}}}