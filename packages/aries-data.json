{"name":"aries-data","version":"2.1.2","description":"![alt text](/img/logo.png \"Guide to the Aries Javascript Library\")","main":"dist/index.js","scripts":{"test":"mocha --require babel-polyfill --compilers js:babel-register","test-watch":"mocha -w --require babel-polyfill --compilers js:babel-register","coverage":"babel-node ./node_modules/.bin/isparta cover _mocha","clean":"rm -rf dist","tail":"tail -f app.log | bunyan -o short","build-src":"npm run clean && babel lib -d dist","build-image":"docker build -t astronomerio/aries-data .","build":"npm run build-src","lint":"eslint lib"},"bin":{"aries-data":"./lib/cli/aries-data.js"},"keywords":[],"license":"ISC","dependencies":{"app-root-path":"^2.0.1","aws-sdk":"2.4.12","babel-core":"^6.4.0","babel-plugin-transform-decorators-legacy":"^1.3.4","babel-polyfill":"^6.3.14","babel-preset-es2015":"^6.3.13","babel-preset-stage-0":"^6.5.0","bunyan":"^1.8.0","bunyan-format":"^0.2.1","cryptobject":"^1.0.3","highland":"^3.0.0-beta.2","lodash.camelcase":"^4.0.1","lodash.flatten":"^4.0.0","lodash.identity":"^3.0.0","lodash.isfunction":"^3.0.7","lodash.isstring":"^4.0.0","lodash.omit":"^4.5.0","lodash.pickby":"^4.6.0","lodash.trimend":"^4.3.0","minimist":"^1.2.0","moment":"^2.17.1","nock":"^8.0.0","promise-queue":"^2.2.2","s3-download-stream":"0.0.5","stream-meter":"github:datarouterai/node-stream-meter#1.0.5","thenify-all":"^1.6.0","uuid":"^2.0.1","validator":"^5.2.0"},"devDependencies":{"babel-cli":"^6.6.5","babel-eslint":"^7.1.1","chai":"^3.5.0","chai-as-promised":"^6.0.0","eslint":"^3.12.2","eslint-config-airbnb":"^13.0.0","eslint-plugin-babel":"^4.0.0","eslint-plugin-import":"^2.2.0","eslint-plugin-jsx-a11y":"^2.2.3","eslint-plugin-react":"^6.8.0","isparta":"^4.0.0","mocha":"^3.2.0","sinon":"^1.17.6"},"gitHead":"32a3fa79154f91778270bda97dba8d5b84da89ce","versions":[{"number":"2.1.0","date":"2017-03-03T07:54:20.693Z"},{"number":"2.1.1","date":"2017-03-08T17:53:45.083Z"},{"number":"2.1.2","date":"2017-08-17T19:58:16.617Z"}],"readme":"![alt text](/img/logo.png \"Guide to the Aries Javascript Library\")\n\n# Aries\n\nAries is a library and CLI that makes it easy to create and run multi-stage workflows written in JavaScript (ES2015/2016), preferably in a distributed cloud environment.\n\n## Terminology\n\n- Activity - Activities are modules that implement a specific task, that will typically make up a larger workflow.  Activities should be small and precise, although they can be long-running.\n\n## Creating an Activity\nWe've created a [yeoman generator](https://github.com/aries-data/generator-aries-activity) with all the necessities. To get started, look through a few examples at the [aries-activity Github organization](https://github.com/aries-data).\n\nThe default export of your module should be your new activity, which extends the `Activity` class that is provided by Aries.  The only thing required of the `Activity` subclass is an implementation of the `onTask` function.\n\nThe `onTask` function is called with two parameters: `activityTask` and `config` by default.  In the Astronomer cloud, a third parameter, `executionDate`, is also provided.\n\n`activityTask` is the raw data provided by the execution environment. The Aries-CLI parses command line arguments and provides this to `onTask`.\n`config` is an arbitrary configuration object for a particular execution of this task.  Activity tasks should be as generic as possible, but configurable using this parameter.  In the astronomer cloud, this object will be created and updated by users in the UI.  In development, this should be a mocked object passed in by your test.\n`executionDate` is the date this particular activity was executed as a part of the currently running workflow.\n\n##### `onTask` implementation\nWorkflows should be broken out into small, precise, managable pieces.  A typical workflow might have two steps:\n\n1.  Extract, or query for some data that exists in a database, or API.\n2.  Transform the output into a format that the destination can work with.\n\nThe return value of `onTask` can be of any type supported by Highland.js. Under the hood, Aries wraps the return value in a highland stream. Streams, promises, or iterables are possible return values;\n\n##### Decorators\nWe provide the following decorators that can be used in any activity:\n\n1. `singleS3FileInput` - Converts activityTask.input from an Amazon S3 Key to the contents of a file.\n    * Arguments: `removeAfter`: if set to true, the file will be removed after\n3. `singleS3StreamInput` - Converts input to a [stream](http://www.streamjs.org)\n    * Arguments: `removeAfter`: if set to true, the file will be removed after\n4. `singleS3StreamOutput` - Allows you to return a [stream](http://www.streamjs.org), which is converted into a file before uploading to S3.\n\nHere's an example of these decorators in an activity that converts data from JSON to CSV format [(see aries-activity-json-to-csv)](https://github.com/aries-data/aries-activity-json-to-csv):\n```javascript\nimport { Activity, singleS3FileInput, singleS3StreamOutput } from 'aries-data';\nimport flatten from 'flat';\nimport papa from 'babyparse';\n\n/**\n * Loads a JSON file, transforms it to csv, then loads back to s3.\n */\nexport default class JsonToCsv extends Activity {\n    static props = {\n        name: require('../package.json').name,\n        version: require('../package.json').version,\n    };\n\n    @singleS3FileInput()\n    @singleS3StreamOutput()\n    async onTask(activityTask, config) {\n        // Create array of strings by splitting on newlines.\n        const split = activityTask.input.file.split('\\n');\n\n        // Turn strings to objects.\n        const docs = split.map(o => {\n            try {\n                return JSON.parse(o)\n            } catch(e) {}\n        }).filter(Boolean);\n\n        // Flatten json objects.\n        const flatDocs = docs.map(d => flatten(d, { delimiter: '_' }));\n\n        // Json to Csv.\n        return papa.unparse(flatDocs, { quotes: true, newline: '\\n' });\n    }\n};\n```\n\n##### Logging\nAries uses bunyan to handle logging. All activities have access to a logger instance by default, which can be used like this: `this.log.debug('debug info here')`. When testing your activity, logs are written to `app.log`, which can be viewed in a pretty format with `tail -f app.log | bunyan -o short`. If you just want the raw logs, `tail -f app.log` will print the logs in their JSON format.\n\nIt is possible to override the output directory of `app.log` by setting `process.env.LOG_PATH` to a directory. The directory must already exist.\n\n##### Testing\nFor consistency, all Aries activities implement [mocha](https://github.com/mochajs/mocha) for testing.  You should split the functionality and logic of your integration into separate functions on your activity.  These functions should be pure and operate on nothing but its input values, then return some result that can be tested.  Ideally, your `onTask` function should just be the glue between the other testable functions of your activity.\n- `npm run test`\n\n##### Putting it all together\nTypically, adding a new \"integration\" may only involve writing a single activity that will be chained to already existing activities to produce the desired workflow.  For example, if you need to get Salesforece API data to Amazon Redshift, you should only need to write the `aries-activity-salesforce-source` activity.  When running as a workflow, your new `aries-activity-salesforce-source` could read data from Salesforce and write the JSON response objects to an S3 object.  The next activity, `aries-activity-json-to-csv` could transform the data from JSON objects to CSV, and load the result to a new S3 object.  Finally, `aries-activity-redshift-sink` could use the CSV output and efficiently load the data using the `COPY` command.\n\nWorkflows are not limited in the amount of activities required.  The typical workflow is three steps, but as the project evolves, workflows could contain many steps, with new features like transformations, and enrichment.  They could even branch and take multiple paths, working on things concurrently.\n\n## Why Node.js?\n\n* Performance: Node.js is wicked fast. Really. Look into it.\n* Isomorphic code: A lot of developers are writing code in JavaScript, both client-side and server-side.\n* Less code: Writing less code is better â€” it leads to increased productivity and fewer bugs. With Node.js, we can write very powerful programs with very few lines of code in a single file.\n* NPM: The npm registry of open-source modules provides a rich library of code to pull into your application. Just about anything that could be written has been written, and you can add these published modules to your package.json as a dependency.\n* Native JSON Support: JSON is the standard data interchange format used by JavaScript, and is easy and natural to work with.\n* Better for microservice architecture: Node.js apps are light (easy to build, deploy, and run), modular (easy to break up and refactor) and I/O driven (asynchronous programming).\n* Open-source community adoption: usage of Node.js continues to rise, many large companies are now running mission-critical applications.\n\n## Roadmap\n- [ ] Better support for JSON serialization for `onTask` return values.  Some activities might need to output multiple files as its output, and other activities may need to receive multiple file names.\n- [ ] Abstractions around s3 file uploads.  This could be a `@s3Result` decorator that automatically takes the returned value, uploads/streams it to S3, and returns a JSON object containing S3 keys.  It could also just be a special type of `s3Result` object that wraps the return value(s).\n- [ ] More flexible error handling.\n- [ ] CLI tooling to create/test/work with activities.\n- [ ] Support for more SWF primitives.\n- [ ] Support for running multiple jobs concurrently, up to threshold.\n","created":"2017-03-03T07:54:20.693Z","modified":"2017-08-17T19:58:16.617Z","lastPublisher":{"name":"aries-data","email":"aries@astronomer.io"},"owners":[{"name":"aries-data","email":"greg@astronomer.io"}],"other":{"_attachments":{},"_from":".","_id":"aries-data","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/aries-data-2.1.2.tgz_1502999895034_0.9952658840920776"},"_npmUser":{"name":"aries-data","email":"aries@astronomer.io"},"_npmVersion":"3.10.10","_rev":"3-94cb3cfcdf1883fc1eddbf7f04a8c1b2","_shasum":"7ca5c1e7b5ab70134f11a4dd5355c0e1f48ae916","author":{"name":"schnie"},"directories":{},"dist-tags":{"latest":"2.1.2"},"dist":{"shasum":"7ca5c1e7b5ab70134f11a4dd5355c0e1f48ae916","tarball":"https://registry.npmjs.org/aries-data/-/aries-data-2.1.2.tgz"},"maintainers":[{"name":"aries-data","email":"greg@astronomer.io"}],"readmeFilename":"README.md","time":{"modified":"2017-08-17T19:58:16.617Z","created":"2017-03-03T07:54:20.693Z","2.1.0":"2017-03-03T07:54:20.693Z","2.1.1":"2017-03-08T17:53:45.083Z","2.1.2":"2017-08-17T19:58:16.617Z"}}}