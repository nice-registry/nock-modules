{"name":"authmosphere","version":"1.0.0-beta.1","description":"authmosphere is a library to support OAuth2 workflows in JavaScript projects.","main":"./lib/src/index.js","typings":"./lib/src/index.d.ts","license":"MIT","keywords":["zalando","oauth2","express","node","typescript"],"publishConfig":{"registry":"https://registry.npmjs.org/"},"files":["lib","README.md","LICENSE","package.json"],"engines":{"node":">=6.0"},"dependencies":{"body-parser":"1.17.2","btoa":"1.1.2","form-urlencoded":"2.0.4","http-status":"1.0.1","nock":"9.0.14","node-fetch":"1.7.1","uuid":"3.1.0"},"devDependencies":{"@types/body-parser":"1.16.4","@types/chai":"4.0.1","@types/chai-as-promised":"0.0.31","@types/express":"4.0.36","@types/http-status":"0.2.29","@types/lolex":"1.5.31","@types/mocha":"2.2.41","@types/nock":"8.2.1","@types/node-fetch":"1.6.7","@types/uuid":"3.4.0","chai":"4.1.0","chai-as-promised":"7.1.1","coveralls":"2.13.1","express":"4.15.3","lolex":"1.6.0","mocha":"3.4.2","nyc":"11.0.3","tslint":"5.5.0","typescript":"2.4.2"},"scripts":{"test":"npm run build && mocha lib/test lib/integration-test --recursive","unit-test":"npm run build && mocha lib/test --recursive","integration-test":"npm run build && mocha lib/integration-test --recursive","test:coverage":"nyc npm run test","coverage":"npm run test:coverage && nyc report --reporter=text-lcov | coveralls","tslint":"tslint --exclude 'src/**/*.d.ts' --type-check --project ./tsconfig.json 'src/**/*.ts' 'test/**/*.ts' 'integration-test/**/*.ts'","build":"rm -rf lib && tsc"},"nyc":{"lines":90,"statements":90,"functions":90,"branches":90,"exclude":["coverage/**/*.js","lib/integration-test/**/*","lib/src/index.js","lib/test/**/*","lib/src/types"],"reporter":["lcov","text","text-summary"],"cache":true,"all":true,"check-coverage":true,"report-dir":"./coverage"},"repository":"https://github.com/zalando-incubator/authmosphere","gitHead":"67316446415fdad1a37e12ba9d745bf7375fdc28","homepage":"https://github.com/zalando-incubator/authmosphere#readme","versions":[{"number":"0.1.0","date":"2017-07-24T09:56:07.384Z"},{"number":"1.0.0-beta.1","date":"2017-08-02T08:39:12.491Z"}],"readme":"# authmosphere {🌍}\n\n[![Build Status](https://travis-ci.org/zalando-incubator/authmosphere.svg)](https://travis-ci.org/zalando-incubator/authmosphere)\n[![Coverage Status](https://coveralls.io/repos/github/zalando-incubator/authmosphere/badge.svg)](https://coveralls.io/github/zalando-incubator/authmosphere)\n[![npm download](https://img.shields.io/npm/dm/authmosphere.svg?style=flat-square)](https://www.npmjs.com/package/authmosphere)\n[![npm version](https://img.shields.io/npm/v/authmosphere.svg?style=flat)](https://www.npmjs.com/package/authmosphere)\n\n## Introduction\n\n`{authmosphere}` is a library to support OAuth2 workflows in JavaScript projects.\n\nIt's implemented in TypeScript which improves the development experience via implicit documentation with types, first-class IDE support and provides mock tooling for local development. The library itself is transpiled to JavaScript (ES6) so there is no need for a TypeScript compiler to use authmosphere in JavaScript projects.\n\nCurrently the following flows are supported:\n\n* [Authorization Code Flow](https://tools.ietf.org/html/rfc6749#section-1.3.1)\n* [Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-1.3.3)\n* [Refresh token Grant](https://tools.ietf.org/html/rfc6749#section-6)\n* Express middlewares to simplify authentication/authorization\n* `TokenCache` service to manage access tokens in your application\n\nSee [STUPS documentation](http://stups.readthedocs.org/en/latest/user-guide/access-control.html#implementing-a-client-asking-resource-owners-for-permission) and [OAuth2 documentation](https://tools.ietf.org/html/rfc6749) for more information.\n\n## Project renaming\n\nThe project was renamed from `lib-oauth-tooling` to `authmosphere`. In the course of this renaming versioning was restarted at `0.1.0`. Version `1.0.0` is soon to be released, keep track of the progess in [#92](https://github.com/zalando-incubator/lib-oauth-tooling/issues/92), this release will contain breaking changes.\n\n## Migrate from `lib-oauth-tooling@2.x.` to `authmosphere@1.x.x`\n\n* call `npm uninstall --save lib-oauth-tooling`\n* call `npm install --save authmosphere`\n\nThe signature of the function `createAuthCodeRequestUri` was changed to be better suitable for partial application. The `authorizationEndpoint` parameter was moved to the first position.\nIt's important to manually adjust your code to this change, since the type system is not helpful in this special case.\n\n```typescript\nfunction createAuthCodeRequestUri(authorizationEndpoint: string,\n                                  redirectUri: string,\n                                  clientId: string,\n                                  queryParams?: {}): string\n```\n\n## Migrating from `lib-oauth-tooling@1.x.` to `lib-oauth-tooling@2.x.x`\n\nIf you depend on the `realm` property you now have to pass the value via the `queryParams` parameters in `OAuthConfig`:\n\n```typescript\n// will NOT work anymore:\ngetAccessToken({\n  // all the other config\n  // ...\n  realm: EMPLOYEES_REALM,\n})\n.then(token: Token => {\n  // ...\n});\n\n// instead use this:\ngetAccessToken({\n  // all the other config\n  // ...\n  queryParams: { realm: '/employees' }\n})\n.then(token: Token => {\n  // ...\n});\n```\n\nSee the [changelog](#changelog) for more information.\n\n## Usage\n\nNote: `node >= 6.0.0` required to consume this library.\n\nRun `npm install authmosphere`.\n\nImport a member of this lib like so (of course ES5 syntax is working as well...):\n\n\n```typescript\nimport {\n  TokenCache,\n  handleOAuthRequestMiddleware,\n  requireScopesMiddleware,\n  ...\n} from 'authmosphere';\n```\n\n#### TokenCache(tokenConfig: { [key: string]: string[] }, oAuthConfig: OAuthConfig, tokenCacheConfig?: TokenCacheConfig)\n\nClass to request and cache tokens on client-side.\n\n```typescript\nconst tokenCache = new TokenCache({\n  'service-foo': ['foo.read', 'foo.write'],\n  'service-bar': ['bar.read']\n}, oAuthConfig);\n\ntokenCache.get('service-foo')\n.then((token: Token) => {\n  console.log(token.access_token);\n});\n```\n\nWhere `OAuthConfig` is defined like:\n\n```typescript\ntype OAuthConfig = {\n  credentialsDir: string;\n  grantType: string; // (`AUTHORIZATION_CODE_GRANT` | `PASSWORD_CREDENTIALS_GRANT`)\n  accessTokenEndpoint: string;\n  tokenInfoEndpoint?: string; // mandatory for TokenCache\n  scopes?: string[];\n  redirect_uri?: string; // (required with `AUTHORIZATION_CODE_GRANT`)\n  code?: string; // (required with `AUTHORIZATION_CODE_GRANT`)\n  redirectUri?: string;\n  refreshToken?: string;\n  queryParams?: {};\n};\n```\n\nOptionally, you can pass a third parameter of type `TokenCacheConfig` to the `TokenCache` constructor to configure the cache behaviour.\n\n```typescript\nconst tokenCache = new TokenCache({\n  'service-foo': ['foo.read', 'foo.write'],\n  'service-bar': ['bar.read']\n}, oAuthConfig, cacheConfig);\n```\n\nWhere`TokenCacheConfig` is defined like:\n\n```typescript\ntype TokenCacheConfig = {\n  /**\n   * To determine when a token is expired locally (means\n   * when to issue a new token): if the token exists for\n   * ((1 - percentageLeft) * lifetime) then issue a new one.\n   * Default value: 0.75\n   */\n  percentageLeft: number\n};\n```\n\n#### handleOAuthRequestMiddleware(options: MiddlewareOptions)\n\nExpress middleware to extract and validate an access token. It attaches the scopes matched by the token to the request (`request.scopes`) for further usage.\nIf the token is not valid the request is rejected (with 401 Unauthorized).\n\n```typescript\napp.use(handleOAuthRequestMiddleware({\n  publicEndpoints: ['/heartbeat', '/status'],\n  tokenInfoEndpoint: 'auth.example.com/tokeninfo'\n});\n```\n\n`options`:\n* `publicEndpoints` string[]\n* `tokenInfoEndpoint` string\n\n#### requireScopesMiddleware(scopes: string[])\n\nSpecifies the scopes needed to access an endpoint. Assumes that there is an `request.scopes` property (as attached by `handleOAuthRequestMiddleware`) to match the required scopes against.\nIf the the requested scopes are not matched request is rejected (with 403 Forbidden).\n\n```typescript\napp.get('/secured/route', requireScopesMiddleware(['scopeA', 'scopeB']), (request, response) => {\n  // do your work...\n})\n```\n\n#### getTokenInfo(tokenInfoEndpoint: string, accessToken: string): Promise<Token>\n\nMakes a request to the `tokenInfoEndpoint` to validate the given `accessToken`.\n\n```typescript\ngetTokenInfo(tokenInfoEndpoint, accessToken)\n.then((token: Token) => {\n  console.log(token.access_token);\n})\n.catch((err) => {\n  console.log(err);\n});\n```\n\nType `Token` is defined as following:\n\n```typescript\ntype Token<CustomTokenPart = any> = CustomTokenPart & {\n  access_token: string;\n  expires_in?: number;\n  scope?: string[];\n  token_type?: string;\n  local_expiry?: number;\n};\n```\n\nThe `Token` type is designed to be extensible. By default the generic type parameter `CustomTokenPart` defaults to `any`. One can provide an additional type to extend the known properties for the Token type:\n\n```typescript\n\n  type CustomDataType = {\n    uid: \"user\",\n    ...\n  };\n\n  const myCustomToken: Token<CustomDataType> = {\n   ...\n  };\n```\n\n\n#### getAccessToken(options: OAuthConfig): Promise<Token>\n\nHelper function to get an access token for the specified scopes.\n\n```typescript\ngetAccessToken(options)\n.then((token: Token) => {\n  console.log(token.access_token);\n})\n.catch((err) => {\n  console.log(err);\n});\n```\n\n`options`:\n* `credentialsDir` string\n* `grantType` string (`AUTHORIZATION_CODE_GRANT` | `PASSWORD_CREDENTIALS_GRANT` | `REFRESH_TOKEN_GRANT`)\n* `accessTokenEndpoint` string\n* `scopes` string optional\n* `queryParams` {} optional\n* `redirect_uri` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n* `code` string optional (required with `AUTHORIZATION_CODE_GRANT`)\n* `refreshToken` string optional (required with REFRESH_TOKEN_GRANT)\n\n#### AUTHORIZATION_CODE_GRANT\n\nString constant specifying the Authorization Code Grant type.\n\n#### PASSWORD_CREDENTIALS_GRANT\n\nString constant specifying the Resource Owner Password Credentials Grant type.\n\n#### REFRESH_TOKEN_GRANT\n\nString constant specifying the Refresh Token Grant type.\n\n## Mock tooling\n\nIf you want to test oAuth locally without being able to actually call real endpoints this library provides some tooling.\n\n#### mockTokenInfoEndpoint(options: MockOptions)\n\nMocks a `tokeninfo` endpoint.\n\n```typescript\nmockTokeninfoEndpoint({\n  url: 'http://some.oauth.endpoint/tokeninfo',\n  tokens: [{\n    access_token: 'someToken123',\n    scope: ['uid', 'something.read', 'something.write']\n  }],\n  times: 1\n});\n```\n\n`options`:\n* `url` string (url of the `tokeninfo` endpoint)\n* `tokens` any optional (list of valid tokens)\n* `times` number optional (for how many times/calls the endpoint is mocked, default is `Number.MAX_SAFE_INTEGER`)\n\n#### mockAccessTokenEndpoint(options: MockOptions)\n\nMocks a `access_token` endpoint.\n\n```typescript\nmockAccessTokenEndpoint({\n  url: 'http://some.oauth.endpoint/access_token',\n  times: 1\n});\n```\n\n`options`:\n* `url` string (url of the `access_token` endpoint)\n* `times` number optional (for how many times/calls the endpoint is mocked, default is `Number.MAX_SAFE_INTEGER`)\n\n#### cleanMock()\n\nCleans all `nock` mocks (not only from this lib, really ALL) and given tokens.\nHelpful when having multiple tests in a test suite, you can call `cleanMock()` in the `afterEach()` callback for example.\n\n```typescript\ncleanMock();\n```\n\n\n## Development\n\n* clone this repo\n* `npm install`\n* to build: `tsc`\n* to lint: `npm run tslint`\n\n\n## Testing\n\n* `npm test` - runs all tests\n* `npm run unit-test` - runs unit tests\n* `npm run integration-test` - runs integration tests\n\n## Changelog\n\n---\n#### `authmosphere 1.0.0` - **BREAKING**\n\nModified signature of `createAuthCodeRequestUri`, see migration guide for more information.\n\n---\n\n#### `lib-oauth-tooling 2.0.0` - **BREAKING**\n\nThe (zalando-specific) `realm` property was removed from `OAuthConfig`. Also, the corresponding constants (`SERVICES_REALM` and `EMPLYEES_REALM`) were removed. Instead, you can add the realm (and arbitrary other query parameters) via the `queryParams` property in `OAuthConfig`.\n\n#### `lib-oauth-tooling 1.0.0` - **BREAKING**\n\nThe signature of `requireScopesMiddleware` is now incompatible with previous versions, `precedenceFunction?` is now part of `precedenceOptions?`.\n\n---\n\n## License\n\nMIT License (MIT)\n\nCopyright (c) 2016 Zalando SE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2017-07-24T09:56:07.384Z","modified":"2017-08-02T08:39:12.491Z","lastPublisher":{"name":"iso50","email":"0xdead10cc@gmx.de"},"owners":[{"name":"bzums","email":"mail@bzums.de"},{"name":"iso50","email":"0xdead10cc@gmx.de"},{"name":"retro64","email":"wegwerfaddresse@gmail.com"}],"other":{"_attachments":{},"_id":"authmosphere","_nodeVersion":"8.1.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/authmosphere-1.0.0-beta.1.tgz_1501663151351_0.6599225290119648"},"_npmUser":{"name":"iso50","email":"0xdead10cc@gmx.de"},"_npmVersion":"5.0.3","_rev":"4-beeefdbb4e08d7098682c3875a3e6450","bugs":{"url":"https://github.com/zalando-incubator/authmosphere/issues"},"contributors":[{"name":"Jörg Dotzki","email":"joerg.dotzki@zalando.de","url":"https://github.com/ISO50"},{"name":"Alexander Dellagi","email":"alexander.dellagi@zalando.de"},{"name":"Bastian Sieker","email":"bastian.sieker@zalando.de","url":"https://github.com/bzums"},{"name":"Markus Görlich","email":"markus.goerlich@zalando.de","url":"https://github.com/retro64"},{"name":"Matthias Achatz","email":"matthias.achatz@zalando.de"}],"directories":{},"dist-tags":{"latest":"1.0.0-beta.1"},"dist":{"integrity":"sha512-lyvEI1Oap4I3++PSjPhx+RCWK4/pRrgCgRjFe07djM2FKL3/3i1QQHAKF6dc0doYDhvKx+CMQfvms0FDBTp3JQ==","shasum":"030e3d6994327d0313b8c062ed7222dc69e47308","tarball":"https://registry.npmjs.org/authmosphere/-/authmosphere-1.0.0-beta.1.tgz"},"maintainers":[{"name":"bzums","email":"mail@bzums.de"},{"name":"iso50","email":"0xdead10cc@gmx.de"},{"name":"retro64","email":"wegwerfaddresse@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-02T08:39:12.491Z","created":"2017-07-24T09:56:07.384Z","0.1.0":"2017-07-24T09:56:07.384Z","1.0.0-beta.1":"2017-08-02T08:39:12.491Z"}}}