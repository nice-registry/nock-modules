{"name":"gdax","version":"0.4.2","dependencies":{"async":"1.5.0","bintrees":"1.0.0","lodash.assign":"3.0.0","lodash.foreach":"3.0.0","lodash.partial":"3.0.0","nock":"3.6.0","num":"0.2.1","request":"2.74.0","ws":"1.1.1"},"description":"Client for the GDAX API","devDependencies":{"mocha":"1.20.1"},"homepage":"https://github.com/coinbase/gdax-node","keywords":["API","bitcoin","coinbase","exchange","real-time","trading","websockets","gdax","ethereum"],"license":"MIT","main":"index.js","repository":"https://github.com/coinbase/gdax-node","scripts":{"test":"mocha --ui qunit --bail --reporter list tests/*.js"},"gitHead":"98d044efba8329e0fd4f583ae2efaaf60ac81d8c","versions":[{"number":"0.2.1","date":"2016-07-18T22:14:28.397Z"},{"number":"0.2.2","date":"2016-11-08T20:16:57.807Z"},{"number":"0.3.0","date":"2016-11-09T02:17:20.683Z"},{"number":"0.3.1","date":"2017-01-16T22:18:51.813Z"},{"number":"0.4.2","date":"2017-04-03T19:21:33.372Z"}],"readme":"# GDAX [![CircleCI](https://circleci.com/gh/coinbase/gdax-node.svg?style=svg)](https://circleci.com/gh/coinbase/gdax-node) [![npm version](https://badge.fury.io/js/gdax.svg)](https://badge.fury.io/js/gdax)\nThe official Node.js library for the [GDAX\nAPI](https://docs.gdax.com/) (formerly Coinbase Exchange).\n\n*Note: this library may be subtly broken or buggy. The code is released under\nthe MIT License – please take the following message to heart:*\n\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n*\n\n## Features\n* Easy programmatic trading.\n* A customizable, websocket-synced Order Book implementation.\n* API clients with convenient methods for every API endpoint.\n* Abstracted interfaces – don't worry about HMAC signing or JSON formatting,\n  the library does it for you.\n* Semantic versioning.\n\n## Installation\n```bash\n# From NPM\nnpm install gdax\n# From Github\nnpm install coinbase/gdax-node\n```\n\n## Quick Start\n\n### The Public API Client\nThe GDAX API has both public and private endpoints. If you're only\ninterested in the public endpoints, you should use a `PublicClient`.\n\n```javascript\nvar Gdax = require('gdax');\nvar publicClient = new Gdax.PublicClient();\n```\n\nAll API methods are callback based. Your callback should accept three arguments:\n\n```\nvar callback = function(err, response, data) {\n  // your code here.\n};\n```\n\nThis callback will be passed directly to [the underlying `request` library's\n`request` method](https://github.com/request/request).  `err` will be either\n`null` or an `Error`. `response` will be a generic HTTP response abstraction\ncreated by the `request` library. `data` will be the result of JSON-decoding\nthe server's response, or `null` if the response was not parseable. You can\nlearn about the API responses of each endpoint [by reading our\ndocumentation](https://docs.gdax.com/#market-data).\n\n#### Public API Methods\n\n* [`getProducts`](https://docs.gdax.com/#get-products)\n```javascript\npublicClient.getProducts(callback);\n```\n\n* [`getProductOrderBook`](https://docs.gdax.com/#get-product-order-book)\n```javascript\n// Get the order book at the default level of detail.\npublicClient.getProductOrderBook(callback);\n// Get the order book at a specific level of detail.\npublicClient.getProductOrderBook({'level': 3}, callback);\n```\n\n* [`getProductTicker`](https://docs.gdax.com/#get-product-ticker)\n```javascript\npublicClient.getProductTicker(callback);\n```\n\n* [`getProductTrades`](https://docs.gdax.com/#get-trades)\n```javascript\npublicClient.getProductTrades(callback);\n// To make paginated requests, include page parameters\npublicClient.getProductTrades({'after': 1000}, callback);\n```\n\n* [`getProductTradeStream`](https://docs.gdax.com/#get-trades)\nWraps around `getProductTrades`, fetches all trades with IDs `>= tradesFrom` and `<= tradesTo`.\nHandles pagination and rate limits.\n\n```javascript\nvar trades = publicClient.getProductTradeStream(8408000, 8409000);\n// tradesTo can also be a function\nvar trades publicClient.getProductTradeStream(8408000, function(trade) {\n    return Date.parse(trade.time) >= 1463068e6\n})\n```\n\n* [`getProductHistoricRates`](https://docs.gdax.com/#get-historic-rates)\n```javascript\npublicClient.getProductHistoricRates(callback);\n// To include extra parameters:\npublicClient.getProductHistoricRates({'granularity': 3000}, callback);\n```\n\n* [`getProduct24HrStats`](https://docs.gdax.com/#get-24hr-stats)\n```javascript\npublicClient.getProduct24HrStats(callback);\n```\n\n* [`getCurrencies`](https://docs.gdax.com/#get-currencies)\n```javascript\npublicClient.getCurrencies(callback);\n```\n\n* [`getTime`](https://docs.gdax.com/#time)\n```javascript\npublicClient.getTime(callback);\n```\n\n### The Authenticated API Client\nThe [private exchange API\nendpoints](https://docs.gdax.com/#private) require you to\nauthenticate with an API key. You can create a new API key [in your exchange\naccount's settings](https://gdax.com/settings). You can also specify the \nAPI uri.\n\n```javascript\nvar Gdax = require('gdax');\nvar apiURI = 'https://api.gdax.com';\nvar sandboxURI = 'https://api-public.sandbox.gdax.com';\n\n// Defaults to https://api.gdax.com if apiURI omitted\nvar authedClient = new Gdax.AuthenticatedClient(\n  key, b64secret, passphrase, apiURI);\n```\n\nLike the `PublicClient`, all API methods are callback based. The callback\nshould be in the same format:\n\n```\nvar callback = function(err, response, data) {\n  // your code here.\n};\n```\n\nThe `AuthenticatedClient` inherits all of the API methods defined by the\n`PublicClient`, so if you're hitting both public and private API endpoints you\nonly need to create a single client.\n\n#### Private API Methods\n\n* [`getAccounts`](https://docs.gdax.com/#list-accounts)\n```javascript\nauthedClient.getAccounts(callback);\n```\n\n* [`getAccount`](https://docs.gdax.com/#get-an-account)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccount(accountID, callback);\n```\n\n* [`getAccountHistory`](https://docs.gdax.com/#get-account-history)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHistory(accountID, callback);\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHistory(accountID, {'before': 3000}, callback);\n```\n\n* [`getAccountHolds`](https://docs.gdax.com/#get-holds)\n```javascript\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHolds(accountID, callback);\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHolds(accountID, {'before': 3000}, callback);\n```\n\n* [`buy`, `sell`](https://docs.gdax.com/#place-a-new-order)\n```javascript\n// Buy 1 BTC @ 100 USD\nvar buyParams = {\n  'price': '100.00', // USD\n  'size': '1',  // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.buy(buyParams, callback);\n\n// Sell 1 BTC @ 110 USD\nvar sellParams = {\n  'price': '110.00', // USD\n  'size': '1', // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.sell(sellParams, callback);\n```\n\n* [`cancelOrder`](https://docs.gdax.com/#cancel-an-order)\n```javascript\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.cancelOrder(orderID, callback);\n```\n\n* [`cancelOrders`](https://docs.gdax.com/#cancel-all)\n```javascript\nauthedClient.cancelOrders(callback);\n```\n\n* [`cancelAllOrders`](https://docs.gdax.com/#cancel-all)\n```javascript\n// `cancelOrders` may require you to make the request multiple times until\n// all the orders are deleted.\n\n// `cancelAllOrders` will handle making these requests for you asyncronously.\n// Also you can add a product_id param to only delete orders of that product\n\n// The response will be the response of the last call and the data will\n// have the order ID's of all your deleted orders\nauthedClient.cancelAllOrders({product_id: 'BTC-USD'}, callback);\n```\n\n* [`getOrders`](https://docs.gdax.com/#list-open-orders)\n```javascript\nauthedClient.getOrders(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getOrders({'after': 3000}, callback);\n```\n\n* [`getOrder`](https://docs.gdax.com/#get-an-order)\n```javascript\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.getOrder(orderID, callback);\n```\n\n* [`getFills`](https://docs.gdax.com/#list-fills)\n```javascript\nauthedClient.getFills(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getFills({'before': 3000}, callback);\n```\n\n* [`getFundings`](https://docs.gdax.com/#list-fundings)\n```javascript\nauthedClient.getFundings({}, callback);\n```\n\n* [`repay`](https://docs.gdax.com/#repay)\n```javascript\nvar params = {\n  'amount': '2000.00',\n  'currency': 'USD'\n};\nauthedClient.repay(params, callback);\n```\n\n* [`marginTransfer`](https://docs.gdax.com/#margin-transfer)\n```javascript\nvar params =\n  'margin_profile_id': '45fa9e3b-00ba-4631-b907-8a98cbdf21be',\n  'type': 'deposit',\n  'currency': 'USD',\n  'amount': 2\n};\nauthedClient.marginTransfer(params, callback);\n```\n\n* [`closePosition`](https://docs.gdax.com/#close)\n```javascript\nvar params = {\n  'repay_only': false\n};\nauthedClient.closePosition(params, callback);\n```\n\n* [`deposit`, `withdraw`](https://docs.gdax.com/#list-fills)\n```javascript\n// Deposit to your Exchange USD account from your Coinbase USD account.\nvar depositParamsUSD = {\n  'amount': '100.00', // USD,\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.deposit(depositParamsUSD, callback);\n// Withdraw from your Exchange USD account to your Coinbase USD account.\nvar withdrawParamsUSD = {\n  'amount': '100.00', // USD,\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsUSD, callback);\n\n// Deposit to your Exchange BTC account from your Coinbase BTC account.\nvar depositParamsBTC = {\n  'amount': '2.0', // BTC,\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.deposit(depositParamsBTC, callback);\n// Withdraw from your Exchange BTC account to your Coinbase BTC account.\nvar withdrawParamsBTC = {\n  'amount': '2.0', // BTC,\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsBTC, callback);\n```\n\n* [`getTrailingVolume`](https://docs.gdax.com/#user-account)\n```javascript\n// Get your 30 day trailing volumes\nauthedClient.getTrailingVolume(callback);\n```\n\n### Websocket client\nThe `WebsocketClient` allows you to connect and listen to the\n[exchange websocket messages](https://docs.gdax.com/#messages).\n```javascript\nvar Gdax = require('gdax');\nvar websocket = new Gdax.WebsocketClient(['BTC-USD', 'ETH-USD']);\nwebsocket.on('message', function(data) { console.log(data); });\n```\nThe following events can be emitted from the `WebsocketClient`:\n* `open`\n* `message`\n* `close`\n* `error`\n\n### Orderbook\n`Orderbook` is a data structure that can be used to store a local copy of the orderbook.\n```javascript\nvar Gdax = require('gdax');\nvar orderbook = new Gdax.Orderbook();\n```\nThe orderbook has the following methods:\n* `state(book)`\n* `get(orderId)`\n* `add(order)`\n* `remove(orderId)`\n* `match(match)`\n* `change(change)`\n\n### Orderbook Sync\n`OrderbookSync` creates a local mirror of the orderbook on GDAX using\n`Orderbook` and `WebsocketClient` as described [here](https://docs.gdax.com/#real-time-order-book).\n\n```javascript\nvar Gdax = require('gdax');\nvar orderbookSync = new Gdax.OrderbookSync();\nconsole.log(orderbookSync.book.state());\n```\n\n## Testing\n\n```bash\nnpm run test\n\n# test for known vulnerabilities in packages\nnpm install -g nsp\nnsp check --output summary\n```\n","starsCount":2,"created":"2016-07-18T22:14:28.397Z","modified":"2017-06-26T21:11:17.532Z","lastPublisher":{"name":"mihar","email":"miha@rebernik.info"},"owners":[{"name":"cilphex","email":"cilphex@gmail.com"},{"name":"feedic","email":"me@feedic.com"},{"name":"mihar","email":"miha@rebernik.info"}],"other":{"_attachments":{},"_from":".","_id":"gdax","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/gdax-0.4.2.tgz_1491247292539_0.6215140896383673"},"_npmUser":{"name":"mihar","email":"miha@rebernik.info"},"_npmVersion":"4.0.3","_rev":"9-484efee7fb3e1abb892256f10d7a4de0","_shasum":"8e8d06222ed97e5e34975d56f51ebf49a56fa872","author":{"name":"Coinbase"},"bugs":{"url":"https://github.com/coinbase/gdax-node/issues"},"contributors":[{"name":"Peter Downs","email":"peterldowns@gmail.com","url":"http://peterdowns.com"},{"name":"Maksim Stepanenko","email":"maksimus16@gmail.com","url":"http://maksim.ms"},{"name":"Miha Rebernik","email":"miha@rebernik.info","url":"http://miha.rebernik.info"}],"directories":{"lib":"./lib"},"dist-tags":{"latest":"0.4.2"},"dist":{"shasum":"8e8d06222ed97e5e34975d56f51ebf49a56fa872","tarball":"https://registry.npmjs.org/gdax/-/gdax-0.4.2.tgz"},"maintainers":[{"name":"cilphex","email":"cilphex@gmail.com"},{"name":"feedic","email":"me@feedic.com"},{"name":"mihar","email":"miha@rebernik.info"}],"readmeFilename":"README.md","time":{"modified":"2017-06-26T21:11:17.532Z","created":"2016-07-18T22:14:28.397Z","0.2.1":"2016-07-18T22:14:28.397Z","0.2.2":"2016-11-08T20:16:57.807Z","0.3.0":"2016-11-09T02:17:20.683Z","0.3.1":"2017-01-16T22:18:51.813Z","0.4.2":"2017-04-03T19:21:33.372Z"},"users":{"bret":true,"abarroso":true}}}