{"name":"node-madgex","version":"0.0.8","description":"node-madgex","main":"index.js","scripts":{"test":"mocha --recursive test","test-debug":"mocha --debug-brk --recursive test","prepush":"npm test"},"dependencies":{"boom":"^2.8.0","change-case":"^2.3.0","cheerio":"^0.19.0","debug":"^2.1.3","extend":"^2.0.0","handlebars":"^3.0.3","json-pointer":"^0.3.0","lodash":"^3.8.0","nock":"^1.3.0","oauth":"^0.9.12","request":"^2.55.0","when":"^3.7.2","xml2js":"^0.4.8"},"devDependencies":{"husky":"^0.7.0","mocha":"^2.2.4"},"repository":"https://github.com/guidesmiths/node-madgex","keywords":["madgex","client","SOAP","REST"],"license":"ISC","homepage":"https://github.com/guidesmiths/node-madgex","gitHead":"adb8a889f771d340b29e7e33672d8381932db25a","versions":[{"number":"0.0.1","date":"2015-05-10T15:02:31.263Z"},{"number":"0.0.2","date":"2015-05-10T15:35:42.366Z"},{"number":"0.0.3","date":"2015-05-11T11:46:28.506Z"},{"number":"0.0.5","date":"2015-05-11T15:55:21.576Z"},{"number":"0.0.8","date":"2015-07-02T13:36:34.219Z"}],"readme":"# node-madgex\n[![Build Status](https://travis-ci.org/guidesmiths/node-madgex.svg?branch=master)](https://travis-ci.org/guidesmiths/node-madgex)\n\nA node.js client for [Madgex](http://madgex.com) web services.\n\n## About\nMadgex's web services are split between RESTful and SOAP APIs. This module currently supports only a subset of the APIs, but we would be delighted to receive pull requests for the methods that are missing.\n\nThe current set of supported web services is\n\n### REST API\n\n1. getinfo\n1. employer\n1. myjobs\n\n### Billing API\n\n1. AddBilledJob\n1. AddRecruiterV2\n1. GetCategories\n1. GetCategoryTerms\n1. GetLocations\n1. UpdateBilledJob\n1. UpdateRecruiterWithBillingID\n1. AddPrePaidCredits\n1. CheckRecruiterExistsV2\n\n\n## The REST API\n\n### Usage\n\n```javascript\nvar madgex = require('node-madgex')\nvar client = madgex.createClient('http://yoursite-webservice.madgexjbtest.com',  { key: 'yourkey', secret: 'yoursecret' })\n\nclient.restApi.jobinfo({ jobid: 1257 }, function(err, data) {\n    console.log(data);\n})\n```\n\nAPI methods usually accept a params hash and a completion callback with (err, data, result) signature;\n\n### Promises\nAs an alternative to the completion callback you can use promises as well. Api methods return with a promise\nthat resolves after the completion callback (if one is present).\n\n```javascript\nclient.jobinfo({ jobid: 1257 })\n      .then(function(data) {\n          //handle data\n      })\n      .fail(function(err) {\n          //dome something with the error\n      });\n```\n\n#### Chain'em\n\nPromised values are easy to compose:\n```javascript\nclient.jobinfo\n      .search({})\n      .then(function(jobs) { return client.jobinfo({jobid: jobs[0].id }) })\n      .then(function(jobdetails) { /*handle data*/ })\n      .fail(function(err) { /*dome something with the error */ });\n```\n\n### Service Description\nThe RESTful client API is dynamically built by code from the service description config file.\nExtend this to add new functions to the API. (/lib/rest-api-service-description.json)\n\n### Service Methods\n\n#### jobinfo(params, done)\nDisplays information about a job\n\n##### params\na hash with the following fields\n\nfield | type,info\n--- | ---\njobid | integer, required\n\n#### jobinfo.search(params, done)\nSearches in the job database\n\n##### params\nfield | type,info\n--- | ---\nkeywords | free text with boolean expressions allowed, optional\ndateFrom | ISO format date\ndateTo | ISO format date\n\n...and much more. refer to the Madgex REST documentation for full set of params.\n\n\n#### jobinfo.search.full(params, done)\nSame as search but returns full dataset\n\n#### jobinfo.search.facets(params, done)\nReturn search refiners for a search result. Params are same as in search()\n\n#### employer(params, done)\nDisplays information about am employer\n\n##### params\na hash with the following fields\n\nfield | type,info\n--- | ---\nid | integer, required\n\n#### employer.search(params, done)\nSearches in the employer database\n\n#### myjobs.add(params, done)\n\n#### myjobs.delete(params, done)\n\n## The SOAP API\n\n### Usage\n```javascript\nvar madgex = require('node-madgex')\nvar client = madgex.createClient('http://yoursite-webservice.madgexjbtest.com',  { key: 'yourkey', secret: 'yoursecret' })\n\nclient.soapApi.billingApi.getCategoryTerms({ categoryId: 105 }, function(err, data) {\n    console.log(data);\n})\n```\nEach billingApi method takes an optional parameters object and typical callback. You can determine the available parameters names by inspecting the equivalent methods handlebars template (see ./lib/soap-templates/*.hbs). These are camel cased equivalents to the elements specified in the Madgex Billing API documentation. Working out which parameters are required and what their values should be requires a degree of experience.\n\nResponses stripped of their SOAPiness and converted to camelCased json. Integers, floats and booleans are parsed, so instead of\n\n```xml\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <soap:Body>\n        <GetCategoriesResponse xmlns=\"http://jobboard.webservice.madgex.co.uk\">\n            <GetCategoriesResult>\n                <WSCategory>\n                    <Mandatory>false</Mandatory>\n                    <MultiSelect>true</MultiSelect>\n                    <ID>105</ID>\n                    <Name>Hours</Name>\n                </WSCategory>\n            </GetCategoriesResult>\n        </GetCategoriesResponse>\n    </soap:Body>\n</soap:Envelope>\n```\n\nyou'll receive\n```json\n[\n    {\n        \"mandatory\": false,\n        \"multiSelect\": true,\n        \"id\": 105,\n        \"name\": \"hours\"\n    }\n]\n```\n\n#### Error handling\nIn the event of an HTTP error, the err object passed to your callback will be blessed with a 'statusCode' property. In the event ofa  SOAP Fault, the err object will additionally be blessed with 'faultCode' and 'faultString' properties.\n\n#### Adding more SOAP API methods\nAdding more API methods is easy\n\n1. Fork and clone node-madgex\n2. Generate a real request and response using your tool of choice ([SoapUI](http://www.soapui.org/), curl, etc)\n3. Convert the request to a handlbars template and save it in lib/soap-templates/MethodName.hbs, \n4. Save the response in test/replies/soap/MethodName.ok.xml\n5. Update lib/soap-api-service-description.json\n6. Add one or more test cases\n7. Submit a PR\n\n","created":"2015-05-10T15:02:31.263Z","modified":"2015-07-03T11:09:33.723Z","lastPublisher":{"name":"guidesmiths","email":"stephen.cresswell@guidesmiths.com"},"owners":[{"name":"guidesmiths","email":"stephen.cresswell@guidesmiths.com"},{"name":"feliun","email":"felipe.polo@gmail.com"},{"name":"peterzentai_gs","email":"peter.zentai@guidesmiths.com"},{"name":"huskley","email":"johnih@mac.com"}],"other":{"_attachments":{},"_from":".","_id":"node-madgex","_npmUser":{"name":"guidesmiths","email":"stephen.cresswell@guidesmiths.com"},"_npmVersion":"1.4.28","_rev":"1-31beb72df7bf9508108bcff5d872530c","_shasum":"083d243841e78914d3e8ad9271d6b5e6f20e292b","author":{"name":"GuideSmiths","email":"peter.zentai@guidesmiths.com"},"bugs":{"url":"https://github.com/guidesmiths/node-madgex/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.0.8"},"dist":{"shasum":"083d243841e78914d3e8ad9271d6b5e6f20e292b","tarball":"http://registry.npmjs.org/node-madgex/-/node-madgex-0.0.8.tgz"},"maintainers":[{"name":"guidesmiths","email":"stephen.cresswell@guidesmiths.com"},{"name":"feliun","email":"felipe.polo@gmail.com"},{"name":"peterzentai_gs","email":"peter.zentai@guidesmiths.com"},{"name":"huskley","email":"johnih@mac.com"}],"readmeFilename":"README.md","time":{"modified":"2015-07-03T11:09:33.723Z","created":"2015-05-10T15:02:31.263Z","0.0.1":"2015-05-10T15:02:31.263Z","0.0.2":"2015-05-10T15:35:42.366Z","0.0.3":"2015-05-11T11:46:28.506Z","0.0.5":"2015-05-11T15:55:21.576Z","0.0.8":"2015-07-02T13:36:34.219Z"}}}