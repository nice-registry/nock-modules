{"name":"knockers","version":"0.4.0","description":"Slightly friendlier interface for nock","main":"index.js","scripts":{"test":"NODE_ENV=test ./node_modules/.bin/istanbul cover -x \"*[spec].js\" ./spec/support/runner.js","watch:test":"NODE_ENV=test ./node_modules/.bin/nodemon -w ./source -w ./spec ./node_modules/.bin/jasmine","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"config":{"ghooks":{"commit-msg":"validate-commit-msg","pre-commit":"bash ./bin/git/hooks/reject-forbidden-code","pre-push":"npm test"}},"keywords":["nock","test"],"repository":"https://github.com/timjnh/knockers","license":"MIT","devDependencies":{"ghooks":"^1.2.1","istanbul":"^0.4.3","jasmine":"^2.4.1","jasmine-reporters":"^2.1.1","nodemon":"^1.9.2","restling":"^0.9.1","validate-commit-msg":"^2.6.1","semantic-release":"^4.3.5"},"dependencies":{"nock":"^8.0.0","q":"^1.4.1"},"gitHead":"2803658a2d4c506a2222bc2b647a4a4d53887281","homepage":"https://github.com/timjnh/knockers#readme","versions":[{"number":"0.0.1","date":"2016-05-01T13:54:16.958Z"},{"number":"0.0.2","date":"2016-05-01T14:24:32.705Z"},{"number":"0.0.3","date":"2016-05-01T14:39:14.650Z"},{"number":"0.1.0","date":"2016-12-09T15:12:14.696Z"},{"number":"0.2.0","date":"2017-02-24T02:04:33.920Z"},{"number":"0.3.0","date":"2017-02-24T02:37:10.027Z"},{"number":"0.4.0","date":"2017-03-28T20:23:50.334Z"}],"readme":"# knockers\n\n[Nock](https://github.com/node-nock/nock) is a great library for mocking out HTTP requests but I find the interface makes for some clunky tests, particularly for simple scenarios.  Knocker builds on nock to streamline these cases and clean up your tests.  It's very much in it's early stages.  Contributions are welcome!\n\nImprovements:\n\n* Full urls for address specification rather than required separation of host and path\n* Logging/buffering of requests so they can be evaluated in a natural order at the end of a test\n* Promises to determine when requests have been fulfilled\n\n## Installation\n\nnpm install --save-dev knockers\n\n## Usage\n\n### Basic Usage\n\n    it('should call my website', function(done) {\n\n        // knockers are created using a builder pattern\n        var knocker = knockers()\n            // the interface accepts full urls.  no more parsing required\n            .get('http://somefunwebsite/with/a/path/and?a=query')\n            // where appropriate, interfaces match nock's\n            .reply(200, { stuff: 'and things' })\n            .build();\n\n        doSomethingToKickOffAnHttpRequest();\n\n        // the received() method returns a promise that resolves after the first request matches the knocker\n        knocker.received()\n            .then(function() {\n                // requests made to the knocker are stored in .requests for more natural test ordering\n                expect(knocker.requests.length).toEqual(1);\n            })\n            .done(done);\n    });\n\n# GET requests\n\nGET requests are very simple\n\n    knockers()\n        .get('http://somefunwebsite/with/a/path/and?a=query')\n        .reply(200, { stuff: 'and things' })\n        .build();\n\n# POST requests\n\nPOST requests are pretty much the same\n\n    var knocker = knockers()\n        .post('http://somefunwebsite/with/a/path')\n        .reply(200, { ok: true })\n        .build();\n\nBodies are inserted into the request object for validation in the expectation portion of your test\n\n    expect(knocker.requests[0].body).toEqual({ expected: body });\n\n# DELETE requests\n\nDELETE requests are pretty close as well\n\n    knockers()\n        .delete('http://somefunwebsite/with/a/path')\n        .reply(200, { stuff: 'and things' })\n        .build();\n\n# Cleanup\n\n    afterEach(function() {\n        knockers.cleanAll();\n    })\n\n# Misc\n\n<img src=\"https://github.com/timjnh/knockers/blob/master/knockers.png\" />\n\nYes they will npmjs.org... Yes they will.\n\n# License\n\nMIT","created":"2016-05-01T13:54:16.958Z","modified":"2017-03-28T20:23:50.334Z","lastPublisher":{"name":"timjnh","email":"jones.timothy.r@gmail.com"},"owners":[{"name":"timjnh","email":"jones.timothy.r@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"knockers","_nodeVersion":"0.10.36","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/knockers-0.4.0.tgz_1490732628375_0.17595103080384433"},"_npmUser":{"name":"timjnh","email":"jones.timothy.r@gmail.com"},"_npmVersion":"2.15.12","_rev":"5-3b49a71530d855582abab4885d24f049","_shasum":"d83b1d9f3f492dc01a0b9a03faab1ce4dca7a34e","author":{"name":"Tim Jones"},"bugs":{"url":"https://github.com/timjnh/knockers/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"d83b1d9f3f492dc01a0b9a03faab1ce4dca7a34e","tarball":"https://registry.npmjs.org/knockers/-/knockers-0.4.0.tgz"},"maintainers":[{"name":"timjnh","email":"jones.timothy.r@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-28T20:23:50.334Z","created":"2016-05-01T13:54:16.958Z","0.0.1":"2016-05-01T13:54:16.958Z","0.0.2":"2016-05-01T14:24:32.705Z","0.0.3":"2016-05-01T14:39:14.650Z","0.1.0":"2016-12-09T15:12:14.696Z","0.2.0":"2017-02-24T02:04:33.920Z","0.3.0":"2017-02-24T02:37:10.027Z","0.4.0":"2017-03-28T20:23:50.334Z"}}}