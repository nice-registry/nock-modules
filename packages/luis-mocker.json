{"name":"luis-mocker","version":"0.1.0","description":"Http mocking for Luis.ai","keywords":["botbuilder","luis","luis.ai","mock","tdd","bdd","unit test","e2e","test"],"main":"dist/src/index.js","scripts":{"prepublishOnly":"npm run cleanBuild && node_modules/mocha/bin/_mocha ./dist/test --recursive","build":"node_modules/typescript/bin/tsc","clean":"rm -rf ./dist","cleanBuild":"npm run clean && npm run build","test":"node_modules/mocha/bin/_mocha --compilers ts:ts-node/register ./test --recursive"},"files":["dist"],"license":"MIT","dependencies":{"lodash":"^4.17.4","luis-response-builder":"^0.2.0","nock":"^9.0.14"},"repository":"https://github.com/microsoftly/luis-mocker","devDependencies":{"@types/chai":"^4.0.1","@types/lodash":"^4.14.71","@types/mocha":"^2.2.41","@types/nock":"^8.2.1","@types/node":"^8.0.14","@types/request":"^2.0.0","@types/request-promise":"^4.1.36","bluebird":"^3.5.0","chai":"^4.1.0","mocha":"^3.4.2","request":"^2.81.0","request-promise":"^4.2.1","ts-node":"^3.2.0","typescript":"^2.4.1","url":"^0.11.0"},"versions":[{"number":"0.0.1","date":"2017-07-27T19:14:30.648Z"},{"number":"0.0.2","date":"2017-07-27T19:32:37.047Z"},{"number":"0.0.3","date":"2017-07-27T20:14:41.790Z"},{"number":"0.0.4","date":"2017-07-27T20:15:57.108Z"},{"number":"0.1.0","date":"2017-07-28T03:40:21.719Z"}],"readme":"# Luis Mocker [![CircleCI](https://circleci.com/gh/microsoftly/luis-mocker.svg?style=shield)](https://circleci.com/gh/microsoftly/luis-mocker)\nEasy http mocking of luis.ai. Perfect for testing services that rely on Luis.ai by making them deterministic and avoiding pay per call requests.\n\nThis is a work in progress. PRs are welcome! \n# installation\n```npm install -save luis-mocker```\n# Classes\n## LuisMocker\n### ```constructor(luisModelUrl)```\n### ```mock(utterance, responseBody)```\n* mock utterance is the string that is expected.\n* responseBody is the response sent back when that utterance is checked. Bodies can be easily built with the [LuisResponseBuilder](github.com/microsoftly/luis-response-builder)\n# example use\n``` javascript\nconst Promise = require(\"bluebird\");\nconst chai = require(\"chai\");\nconst { DateTimeV2, LuisResponseBuilder } = require(\"luis-response-builder\");\nconst rp = require(\"request-promise\");\nconst LuisMocker = require(\"./../src/LuisMocker\");\n\ndescribe('LuisMocker', () => {\n    const july15AmbiguousDateEntity = DateTimeV2.createDateTimeV2_Date_EntityWithAmbiguousDate('July 15th', 0, 4, new Date('7/19'), new Date('2015'));\n    const cancelTacoBellResponse = new LuisResponseBuilder('I want to cancel my reservation at Taco Bell on July 15th')\n        .addCustomEntity({ startIndex: 0, endIndex: 4, type: 'restaurantName', entity: 'taco bell', score: .98 })\n        .addPrebuiltEntity(july15AmbiguousDateEntity)\n        .addIntent('cancel', .92)\n        .addIntent('login', .3)\n        .addIntent('none', .02)\n        .build();\n\n    it('can mock requests to luis.ai', () => {\n        return rp.get(cancelTacoBellUri, { json: true })\n            .then((cancelTacoBellTestResponse) => {\n                chai.expect(cancelTacoBellTestResponse).to.deep.equal(cancelTacoBellResponse);\n            })\n});\n```","created":"2017-07-27T19:14:30.648Z","modified":"2017-07-28T03:40:21.719Z","lastPublisher":{"name":"matts310","email":"mattschwartz310@gmail.com"},"owners":[{"name":"matts310","email":"mattschwartz310@gmail.com"}],"other":{"_attachments":{},"_id":"luis-mocker","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/luis-mocker-0.1.0.tgz_1501213221499_0.12051367573440075"},"_npmUser":{"name":"matts310","email":"mattschwartz310@gmail.com"},"_rev":"5-c9a7355cc7b3a4fe8308eb3f1a64b4fb","author":{"name":"Matthew Schwartz"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"0d12b17e7ad064a902e80d344c6a080756a69e55","tarball":"https://registry.npmjs.org/luis-mocker/-/luis-mocker-0.1.0.tgz"},"maintainers":[{"name":"matts310","email":"mattschwartz310@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-28T03:40:21.719Z","created":"2017-07-27T19:14:30.648Z","0.0.1":"2017-07-27T19:14:30.648Z","0.0.2":"2017-07-27T19:32:37.047Z","0.0.3":"2017-07-27T20:14:41.790Z","0.0.4":"2017-07-27T20:15:57.108Z","0.1.0":"2017-07-28T03:40:21.719Z"}}}