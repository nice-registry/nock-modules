{"name":"whispir-node-sdk","description":"Node.js SDK for Whispir's Powerful Conversation API.","version":"2.0.0","homepage":"https://bitbucket.org/jordanwalsh23/whispir-sdk-node","repository":{"type":"git","url":"git+ssh://git@bitbucket.org/jordanwalsh23/whispir-sdk-node.git"},"license":"MIT","main":"lib/index.js","dependencies":{"chai":"^3.4.1","chai-as-promised":"^5.2.0","mock-fs":"^3.6.0","nock":"^4.0.0","q":"^1.4.1","read-multiple-files":"^1.1.1","request":"^2.67.0","underscore":"^1.8.3"},"devDependencies":{},"scripts":{"test":"mocha --recursive"},"keywords":["nodejs","whispir","api","sms","email","voice","REST","API","communications","2 way sms","cross channel"],"gitHead":"fd8ec280451b5a46629ccb2361bf9927eee0cd55","versions":[{"number":"2.0.0","date":"2016-09-22T01:30:50.063Z"}],"readme":"Whispir SDK for NodeJS\n======================\n\nDeliver communications to your users, team members, customers, stakeholders or staff members via simple node.js commands.\n\nPowered by [Whispir.io](https://whispir.io)\n\nWhispir supports communication via:\n\n-\tsms\n\t-\t2 way\n\t-\tnumber masking\n-\temail\n\n\t-\temail to sms\n\n-\tvoice (ivr)\n\n-\tweb\n\n\t-\trich messaging\n\n-\tpush notifications\n\n-\trss\n\n-\tsocial media\n\n\t-\ttwitter\n\t-\tfacebook\n\t-\tlinkedin\n\nThe value of Whispir lies in how quickly one can orchestrate a rich workflow by pivoting from one channel to another without the need for changing the providers. So, you can begin with SMS, depending on the reply, send an email or trigger a voice call.\n\nAn Example:\n\n**Customer satisfaction survey**\n\n-\tSend an SMS asking for rating of your service (1[bad] - 10[good])\n-\tCustomer replies to your SMS (whispir supports SMS replies for free) as 3\n-\tImmediately you can\n\t-\tSend a `callback` response to your support application to add rating comments OR send a support email to your Customer service agent\n\t-\tMay choose to call the customer via voice channel to get in-person input\n\t-\t...\n\t-\t...\n\nFor more details and use cases visit https://www.whispir.com and https://whispir.io\n\nNote: This SDK is built to support the API definitions provided at https://whispir.io. If there is any bug/issue in implementation of this library, please refer to the API Documentation first and then raise a ticket.\n\nGetting Started\n---------------\n\nYou'll need to sign up for an account at [Whispir.io](https://whispir.io). This will give you your username, password and apikey.\n\nInstalling the SDK\n------------------\n\nWhispir SDK is available on NPM. Dependencies are q (for promises), _ (underscore), request, chai-as-promised, chai, nock, mock-fs, mocha.\n\n`npm install whispir-node-sdk`\n\nInitiating a client\n-------------------\n\nTo use the SDK library, you have to create a client object first. This client provides you with all the resources (for each endpoint and some util packages)\n\n```\nvar WhispirSDK = require('whispir-node-sdk');\n\n// sending in credentials, and apiKey\nvar wAPIClient = new WhispirSDK('username', 'password', 'apikey');\n\n// whispir sdk also supports passing in the credentials, key via a fixed auth.json file placed in the home directory (shown below)\n// when no params are passed, the SDK searches in your home directory\nvar wAPIClient = new WhispirSDK();\n```\n\n*Create a file in your home directory:*\n\n```\nmkdir ~/.whispir\ntouch ~/.whispir/auth.json\n```\n\nThe auth.json file should look as follows:\n\n```\n{\n  \"username\":\"john.smith\",\n  \"password\":\"one2three\",\n  \"apikey\":\"ds0dsf09hdfsh90df90hdfsj\"\n}\n```\n\nThe whispir-node-sdk looks in your home directory for these properties so without them set, it won't be able to connect to the API.\n\nResources (endpoints)\n---------------------\n\nThe SDK supports the following API Endpoints\n\n| END POINT          | RESOURCE             | Use                                                                                               |\n|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n| /messages          | Message              | `wAPIClient.Message()` <br> `wAPIClient.SMS()` <br> `wAPIClient.Email()` <br> `wAPIClient.Call()` |\n| /templates         | Template             | `wAPIClient.Template()`                                                                           |\n| /contacts          | Contact              | `wAPIClient.Contact()`                                                                            |\n| /distributionlists | DistributionList, DL | `wAPIClient.DistributionList()`, `wAPIClient.DL()`                                                |\n| /users             | User                 | `wAPIClient.User()`                                                                               |\n| /callbacks         | Callback             | `wAPIClient.Callback()`                                                                           |\n| /workspaces        | Workspace            | `wAPIClient.WorkSpace()`                                                                          |\n| /activities        | Activity             | `wAPIClient.Activity()`                                                                           |\n| /event             | Event                | `wAPIClient.Event()`                                                                              |\n| /customlists       | CustomList           | `wAPIClient.CustomList()`                                                                         |\n| /responserules     | ResponseRule         | `wAPIClient.ResponseRule()`                                                                       |\n| /scenarios         | Scenario             | `wAPIClient.Scenario()`                                                                           |\n| /resources         | Resource             | `wAPIClient.Resource()`                                                                           |\n| /import            | Import               | `wAPIClient.Import()`                                                                             |\n\nHow to Use ?\n------------\n\nUsing Whispir-node-sdk is easy. Here's an example of sending a Message.\n\n```\nvar WhispirSDK = require('whispir-node-sdk');\n\nvar wAPIClient = new WhispirSDK(); // uses the auth.json file as no params are passed in\n\n\n// creating the message | `new` prefix is not needed. its automatic\nvar wMessage = wAPIClient.Message({\n        to: '+10000000',\n        subject: 'Hello',\n        body: 'Sending a message using whispir node sdk'\n    });\n\n    //send() triggers the API call and it returns a promise.\n    wMessage.send().then(function(result){\n        //result contains the location, id of the sent message\n        console.log('The id is `%s`, and location is `%s`', result.id, result.location);\n    }, function(fail){\n        // contains the response code and error\n    });\n```\n\n**To send a message in a particular workspace, you can -**\n\n-\tset the workspace at client level\n\t-\tall the API Calls made using this client uses the workspaceId \"1234ABCD\"\n\t-\tyou can use the `wAPIClient.getWorkSpaceId()` to return you the current workSpaceId of the client object (set at global level)\n\n```\n    /* set workspace at client level */\n    wAPIClient.setWorkSpaceId('1234ABCD');\n\n```\n\n-\tset the workspace at the RESOURCE level\n\t-\tthis will NOT overwrite the client's workSpaceId.\n\t-\tIt is temporary and is only limited to this Resource (API Call) you are doing\n\t-\tyou can use the `wMessage.get('workSpaceId')` to return you the current workSpaceId of the client object that is sending making this API Call\n\t-\thelps you to use a single client and switch between multiple workspaces with ease\n\t-\tthere is no `wMessage.workSpaceId('1234ABCD')` method available to set the workSpaceId. It must be passed in when the RESOURCE is being created. `wAPIClient.wMessage({workSpaceId: '1234ABCD'})`\n\n```\nvar WhispirSDK = require('whispir-node-sdk');\n\nvar wAPIClient = new WhispirSDK(); // uses the auth.json file as no params are passed in\n    wAPIClient.setWorkSpaceId('1234ABCD');\n\n/* set workspace at resource level */\n\nvar wMessage = wAPIClient.Message({workSpaceId : '4567MNOP'});\n\n/* assertion */\nwAPIClient.getWorkSpaceId() === wMessage.get('workSpaceId') // return false\n\n```\n\nMethod Chaining and Promises\n----------------------------\n\nWhispirSDK supports method chaining and also returns a promise after an API call is made. So, you can do -\n\n```\nvar wMessage = wAPIClient.Message({workSpaceId: 'ABCD1234'})\n                .to('+100000000'); // no dashes please\n\nvar wTemplate = wAPIClient.Template({workSpaceId: 'ABCD1234'})\n                .subject('Hello')\n                .body('Sample Message');\n\n/* create a template and then send a message using that template */\nwTemplate.create().then( function (template) {\n        return wMessage.useTemplateWithIdAs(template.id).send(); //sending a message returns a promise again\n    }).then( function (message) {\n        console.log('The id is `%s`, and location is `%s`', message.id, message.location);\n    }.catch( function (err) {\n        console.log('Error occurred', err);\n    });\n```\n\nHow to ?\n--------\n\n### Message\n\n-\tTo send a message via SMS , Email, Voice, Social Media channels\n-\tMessage also comes with neat synonyms - SMS, Email, Call. These 3 are in all parts similar to message. they are just a naming convenience to state the nature of the message object and the channel of communication.\n\n```\nvar wMessage = wAPIClient.Message();\n\nvar wSMS = wAPIClient.SMS(); // === wMessage\nvar wEmail = wAPIClient.Email();\nvar wCall = wAPIClient.Call();\n```\n\n**Methods Available**\n\n| Method name                                                   | Definition                                        | Use                                                                                                                                                                                                                                                                                          |\n|---------------------------------------------------------------|---------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| client                                                        | function() {} <br> - takes no arguments           | returns the current client configuration object (apiKey, username, password) <br> <br> `var clientConfig = wMessage().client()`                                                                                                                                                              |\n| describe                                                      | function() {} <br> - takes no arguments           | returns simple help about this endpoint <br> <br> `wMessage().describe()`                                                                                                                                                                                                                    |\n| get                                                           | function (*string* propertyName) {}               | returns the value of a property in this object <br> <br> `wMessage().get('to'); \\\\ - returns the value of 'to' property` <br><br> Throws an Error \"*property* is undefined in *RESOURCE* Object\" if requested for an invalid property Or property whose value is not yet set                 |\n| id                                                            | function (*string* id) {}                         | sets the message Id value. Used during the retrieve, getMessageStatus, getMessageResponses actions <br> <br> - returns the object instance for method chaining                                                                                                                               |\n| to                                                            | function (*string* to) {}                         | sets the `to` value. Your string could be comma separated values of phone numbers, email, contact MRI, DistributionList MRI values <br> <br> `wMessage().to('6598765432, sam@example.com'); \\\\ sets the value for 'to' property` <br> <br> - returns the object instance for method chaining |\n| subject                                                       | function (*string* subject) {}                    | sets the `subject` value. Common for both SMS, Email <br> <br> - returns the object instance for method chaining                                                                                                                                                                             |\n| body                                                          | function (*string* body) {}                       | sets the `body` value (goes in as SMS text) <br> <br> - returns the object instance for method chaining                                                                                                                                                                                      |\n| email                                                         | function (*object* email) {}                      | sets the `email` value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                           |\n| voice, call                                                   | function (*object* voice) {}                      | sets the voice value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                             |\n| web                                                           | function (*object* web) {}                        | sets the web value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                               |\n| social                                                        | function (*object* social) {}                     | sets the social value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                            |\n| type                                                          | function (*string* type) {}                       | sets the type value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                              |\n| social                                                        | function (*object* social) {}                     | sets the social value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                            |\n| messageattributes                                             | function (*object* messageattributes) {}          | sets the messageattributes value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                 |\n| resource                                                      | function (*object* resource) {}                   | sets the resource value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                          |\n| features                                                      | function (*object* features) {}                   | sets the features value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                          |\n| schedule                                                      | function (*object* schedule) {}                   | sets the schedule value <br> <br> accepts the following in the object `{ count: '', days: '', hours: '', minutes: '', startDate: '', type: ''}` <br>scheduleType can be `ONCE` or `REPEAT` <br> <br> - returns the object instance for method chaining                                       |\n| messageTemplateId, useTemplateWithIdAs, usingTemplateId       | function (*string* templateId) {}                 | sets the messageTemplateId value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                 |\n| messageTemplateName, useTemplateWithNameAs, usingTemplateName | function (*string* templateName) {}               | sets the messageTemplateName value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                               |\n| callbackId                                                    | function (*string* callbackName) {}               | sets the callbackId value. Actually its the name of the callback. Not the Id. So provide the `name`, not the `Id` <br> <br> - returns the object instance for method chaining                                                                                                                |\n| callbackParameters                                            | function (*object* callbackParameters) {}         | sets the callbackParameters value. These values are returned back to you via the callback response. <br> <br> - returns the object instance for method chaining                                                                                                                              |\n| eventId, usingEventId                                         | function (*string* eventId) {}                    | sets the eventId. The messages sent under this eventId <br> <br> - returns the object instance for method                                                                                                                                                                                    |\n| label                                                         | function (*string* label) {}                      | sets the label value. <br><br> - returns the object instance for method chaining                                                                                                                                                                                                             |\n| attach                                                        | function (*string* type, *Array* attachments) { } | Useful to send attachment for Email or Custom voice messages in Voice Calls <br> <br> - returns the object instance for method                                                                                                                                                               |\n| toJsonString                                                  | function () {}                                    | - returns the object as string <br><br> you cannot chain a method after this                                                                                                                                                                                                                 |\n\n**Methods that trigger the API Call**\n\n| Method name                       | Definition                                                                                                                                                                                                                                           | Use                                                                                                                                                                                                                                                                                                                                                                                        |\n|-----------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| search                            | function (*string* queryParams) {}                                                                                                                                                                                                                   | searches for message with the given queryParams <br><br> returns a promise with results                                                                                                                                                                                                                                                                                                    |\n| getStatus, getMessageStatus       | function (*string* view) {} <br><br> - view can be either 'summary' or 'detailed' <br> - the `id` property (messageId) must have been set to the object already                                                                                      | provides the status for the given messageId <br><br> - returns a promise with status in results.body                                                                                                                                                                                                                                                                                       |\n| getResponses, getMessageResponses | function (*string* view) {} <br><br> - view can be either 'summary' or 'detailed' <br> - the `id` property (messageId) must have been set to the object already                                                                                      | provides the responses for the given messageId <br><br> - returns a promise with responses in results.body                                                                                                                                                                                                                                                                                 |\n| retrieveEventMessages             | function () {}                                                                                                                                                                                                                                       | retrieves all the messages sent for a specific event. The Message `label` has to be provided for this method to succeed <br><br> - returns a promise with responses in results.body                                                                                                                                                                                                        |\n| send, make                        | function (*string* message-properties-object) {} <br> <br> the parameter for this function can be a json object with all the message properties sent directly such that you do not need to define each property separately. (see example code below) | does the API Call to send the message. send - make are synonyms here. send for message (sms), email. where as make for Call. <br><br> - returns a promise with id, location of the sent message                                                                                                                                                                                            |\n| bulkSend                          | function () {}                                                                                                                                                                                                                                       | to be used ONLY when doing a bulk sending of messages via the `resourceId` as VSMT headers would differ from normal send. For this to succeed, the resourceId property must be defined. Refer to [/resources endpoint](https://whispir.github.io/api/#sending-messages-using-template-&-resources) for more information <br><br> - returns a promise with id, location of the sent message |\n\n### Code Examples for message object\n\n#### Sending a Message / SMS\n\n-\tRefer to Online API Documentation [Link](https://whispir.github.io/api/#sms-messages)\n\n```\nvar messageDefn = {\n    workSpaceId: 'AZYPK123ER54HG23',\n    to : '+100000000',\n    subject: 'This is a Subject',\n    body: 'This is body of message'\n};\n\nvar onSuccess = function (result) {\n    // result contains the location, id of the sent message\n    console.log('The id is `%s`, and location is `%s`', result.id, result.location);\n};\n\nvar onFailure = function (fail) {\n    // contains the response code and error\n    console.log('Error Code: %s, Reason: %s', fail.statusCode, fail.body);\n};\n\n/* Defining the message when Initiating it */\nwAPIClient.Message(messageDefn).send().then(onSuccess, onFailure);\n\n/* workSpaceId can only be sent while Initiating; then using method chains to define the rest of message properties */\n\nvar messageOptions = {\n        workSpaceId: 1\n};\nvar messageProperties = {\n        to: '+6598765432',\n        subject: 'message subject',\n        body: 'message body'\n};\n\nwAPIClient.Message(messageOptions)\n    .to(messageProperties.to)\n    .subject(messageProperties.subject)\n    .body(messageProperties.body)\n    .send().then(onSuccess, onFailure);\n\n/* sending the message property directly to the send method */\nwAPIClient.Message(messageOptions)\n    .send(messageProperties).then(onSuccess, onFailure);\n\n// Note: If workspaceId is not passed, the message will be sent in your Default workspace\nwAPIClient.Message()\n    .to(messageProperties.to)\n    .subject(messageProperties.subject)\n    .body(messageProperties.body)\n    .send().then(onSuccess, onFailure); // message sent in Default workspace\n\n/* you may also use .SMS() in place of .Message() in all the examples above */\nwAPIClient.SMS() is same as wAPIClient.Message();\n```\n\n#### Sending an Email\n\n-\tRefer to Online API Documentation [Link](https://whispir.github.io/api/#email-messages)\n\n```\nvar EmailDefn = {\n    workSpaceId: 'AZYPK123ER54HG23',\n    to : \"john.smith@test.com\",\n    subject : \"Test Email Message\",\n    email : {\n        body : \"Email Body goes here.\",\n        footer : \"Email signature goes here.\",\n        type : \"text/plain\"\n    }\n};\n\nvar onSuccess = function (result) {\n    // result contains the location, id of the sent message\n    console.log('The id is `%s`, and location is `%s`', result.id, result.location);\n};\n\nvar onFailure = function (fail) {\n    // contains the response code and error\n    console.log('Error Code: %s, Reason: %s', fail.statusCode, fail.body);\n};\n\n/* Defining the message when Initiating it */\nwAPIClient.Message(EmailDefn).send().then(onSuccess, onFailure);\n\n/* workSpaceId can only be sent while Initiating; then using method chains to define the rest of message properties */\n\nvar messageOptions = {\n    workSpaceId: 1\n};\nvar messageProperties = {\n    to : \"john.smith@test.com\",\n    subject : \"Test Email Message\",\n    email : {\n        body : \"Email Body goes here.\",\n        footer : \"Email signature goes here.\",\n        type : \"text/plain\"\n    }\n};\n\nwAPIClient.Message(messageOptions)\n    .to(messageProperties.to)\n    .subject(messageProperties.subject)\n    .email(messageProperties.email)\n    .send().then(onSuccess, onFailure);\n\n/* sending the message property directly to the send method */\nwAPIClient.Message(messageOptions)\n    .send(messageProperties).then(onSuccess, onFailure);\n\n// you may also use .Email() in place of .Message() in all the examples above\nwAPIClient.Email() is same as wAPIClient.Message();\n```\n\n#### Making a Voice call, and Conference calls\n\n-\tRefer to Online API Documentation [Link](https://whispir.github.io/api/#voice-messages)\n\n```\nvar VoiceDefn = {\n    workSpaceId: 'AZYPK123ER54HG23',\n    to : \"john.smith@test.com\",\n    subject : \"Test Email Message\",\n    voice : {\n        header : \"This is the introduction of the voice call\",\n        body : \"This is the body of the message\",\n        type : \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\"\n    }\n};\n\nvar onSuccess = function (result) {\n    // result contains the location, id of the sent message\n    console.log('The id is `%s`, and location is `%s`', result.id, result.location);\n};\n\nvar onFailure = function (fail) {\n    // contains the response code and error\n    console.log('Error Code: %s, Reason: %s', fail.statusCode, fail.body);\n};\n\n/* Defining the message when Initiating it */\nwAPIClient.Message(VoiceDefn).send().then(onSuccess, onFailure);\n\n/* workSpaceId can only be sent while Initiating; then using method chains to define the rest of message properties */\n\nvar messageOptions = {\n    workSpaceId: 1\n};\nvar messageProperties = {\n    to : \"john.smith@test.com\",\n    subject : \"Test Email Message\",\n    voice : {\n        header : \"This is the introduction of the voice call\",\n        body : \"This is the body of the message\",\n        type : \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\"\n    }\n};\n\nwAPIClient.Call(messageOptions)\n    .to(messageProperties.to)\n    .subject(messageProperties.subject)\n    .voice(messageProperties.voice)\n    .make().then(onSuccess, onFailure);\n\n/* sending the message property directly to the send method */\nwAPIClient.Message(messageOptions)\n    .send(messageProperties).then(onSuccess, onFailure);\n\n// you may also use .Email() in place of .Message() in all the examples above\nwAPIClient.Call() === wAPIClient.Message()\n\n// send and make are same too\nwAPIClient.Call().make() === wAPIClient.Call().send() === wAPIClient.Message().send() === wAPIClient.Message().make()\n```\n\n#### Get Message Status, Get Message Responses\n\n-\tMessage Status - [Online Docs](https://whispir.github.io/api/#message-status)\n-\tMessage Responses - [Online Docs](https://whispir.github.io/api/#message-responses)\n\n```\nvar messageOptions = {\n    workSpaceId: 1,\n    id: 'HJ8702734SDNFN7823'\n};\n\n/* getting status of a message */\nwAPIClient.Message(messageOptions).getMessageStatus(); // returns a promise\n\n// similarly\nwAPIClient.Message(messageOptions).getStatus(); // getStatus() is alias for getMessageStatus(); returns a promise\n\n// you can also pass in workSpaceId, id (messageId) separately\nwAPIClient.Message({workSpaceId: messageOptions.workSpaceId}).id(messageOptions.id).getStatus();\n\n/* getting message Responses */\nwAPIClient.Message(messageOptions).getMessageResponses(); // returns a promise\n\n// similarly\nwAPIClient.Message(messageOptions).getResponses(); // getResponses() is alias for getMessageResponses(); returns a promise\n```\n\n### Templates\n\n-\tRefer to Online Documentation for [Templates](https://whispir.github.io/api/#templates)\n-\tRefer to examples/Template\n\n**Methods Available**\n\n| Method name                      | Definition                                | Use                                                                                                                                                                                                                                                                           |\n|----------------------------------|-------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| client                           | function() {} <br> - takes no arguments   | returns the current client configuration object (apiKey, username, password) <br> <br> `var clientConfig = wTemplate().client()`                                                                                                                                              |\n| describe                         | function() {} <br> - takes no arguments   | returns simple help about this endpoint <br> <br> `wTemplate().describe()`                                                                                                                                                                                                    |\n| get                              | function (*string* propertyName) {}       | returns the value of a property in this object <br> <br> `wTemplate().get('to'); \\\\ - returns the value of 'to' property` <br><br> Throws an Error \"*property* is undefined in *RESOURCE* Object\" if requested for an invalid property Or property whose value is not yet set |\n| id                               | function (*string* id) {}                 | sets the template Id value. Used during the retrieve, update, delete actions <br> <br> - returns the object instance for method chaining                                                                                                                                      |\n| name                             | function (*string* name) {}               | sets the template name value. Used by when message sending and identification of a template <br><br> - returns the object instance for method chaining                                                                                                                        |\n| description                      | function (*string* description) {}        | sets the template description value. <br><br> - returns the object instance for method chaining                                                                                                                                                                               |\n| responseRule, responseTemplateId | function (*string* responseTemplateId) {} | sets the responserule associated with this template. <br><br> - returns the object instance for method chaining                                                                                                                                                               |\n| subject                          | function (*string* subject) {}            | sets the `subject` value. Common for both SMS, Email <br> <br> - returns the object instance for method chaining                                                                                                                                                              |\n| body                             | function (*string* body) {}               | sets the `body` value (goes in as SMS text) <br> <br> - returns the object instance for method chaining                                                                                                                                                                       |\n| email                            | function (*object* email) {}              | sets the `email` value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                            |\n| voice, call                      | function (*object* voice) {}              | sets the voice value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                              |\n| web                              | function (*object* web) {}                | sets the web value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                                |\n| social                           | function (*object* social) {}             | sets the social value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                             |\n| type                             | function (*string* type) {}               | sets the type value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                               |\n| social                           | function (*object* social) {}             | sets the social value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                             |\n| features                         | function (*object* features) {}           | sets the features value <br> <br> - returns the object instance for method chaining                                                                                                                                                                                           |\n| toJsonString                     | function () {}                            | - returns the object as string <br> <br> you cannot chain a method after this                                                                                                                                                                                                 |\n\n**Methods that trigger the API Call**\n\n| Method name | Definition                                                                                                                                                                                                                                                                                                                       | Use                                                                                                                                                                                       |\n|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| create      | function (*object* template-properties-object) {} <br> <br> the parameter for this function can be a json object with all the template properties sent directly such that you do not need to define each property separately. (see example code)                                                                                 | does the API Call to create the template. <br><br> - returns a promise with id, location of the created template                                                                          |\n| retrieve    | function () {}                                                                                                                                                                                                                                                                                                                   | does the API Call to get the template details. The template id must be already set to the object before this method is invoked. <br><br> - returns a promise with details of the template |\n| update      | function (*object* template-properties-object) {} <br> <br> the parameter for this function can be a json object with all the template properties sent directly such that you do not need to define each property separately. (see example code. However the template id must be set explicitly via `wTemplate.id(*string* id)`. | - returns a promise with success/ fail                                                                                                                                                    |\n| delete      | function () {}                                                                                                                                                                                                                                                                                                                   | Deletes the template with given Id. Id has to set explicitly via `wTemplate.id(*string* id)` <br> <br> - returns a promise with success/ fail                                             |\n\nUnit test\n=========\n\n-\tnpm test\n","created":"2016-09-22T01:30:50.063Z","modified":"2016-09-22T01:30:50.063Z","lastPublisher":{"name":"jordanwalsh23","email":"jordanwalsh23@gmail.com"},"owners":[{"name":"jordanwalsh23","email":"jordanwalsh23@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"whispir-node-sdk","_nodeVersion":"5.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/whispir-node-sdk-2.0.0.tgz_1474507848291_0.8717497256584466"},"_npmUser":{"name":"jordanwalsh23","email":"jordanwalsh23@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-da53de503c4734f1a0a4def4c830b443","_shasum":"f20a4ff63a241f72a549d5ef203b5ee83d074022","author":{"name":"Sanjeev Mandalapu","email":"smandalapu@whispir.com","url":"https://whispir.io"},"bugs":{"url":"https://bitbucket.org/jordanwalsh23/whispir-sdk-node/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"f20a4ff63a241f72a549d5ef203b5ee83d074022","tarball":"http://registry.npmjs.org/whispir-node-sdk/-/whispir-node-sdk-2.0.0.tgz"},"maintainers":[{"name":"jordanwalsh23","email":"jordanwalsh23@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-22T01:30:50.063Z","created":"2016-09-22T01:30:50.063Z","2.0.0":"2016-09-22T01:30:50.063Z"}}}